#!/usr/bin/perl
# HG: create a list all classes referenced in the fai logfiles
#     run this script with the FAI logdir on the logserver as argument
#     it extracts all references to classes and prints them on stdout
#     Format:
#       $class $datetime $hostname $class_priority

use strict;
use warnings;
use Getopt::Std;
use File::Find;
use File::Basename;

my $log_topdir;
our ($opt_h);

# Dirs within the logdirs to be ignored
my @ignore_dirs = qw'backup ssh .ssh';

# array to accumulate lines
my @lines;
# scan $logfdir/$hostname/FAI_CLASSES for references on classes
sub scan_log {
	sub read_class_file {
		my $dir=shift;
		my $fname=shift;
		my $fh;
		
		if ($dir =~ m#(^|/)([^/]+)/\w+-(\d+)_(\d+)$#) {
			my $host=$2;
			my $date=$3;
			my $time=$4;
			my $position=0;
			
			open $fh,$fname;
			while (<$fh>) {
				s/#.*//;
				chomp;
				my @classes=split;
				foreach (@classes) {
					s#^\W*([\w-]+)\W*$#$1#;
					my $line="$_ $date$time $host $position";
					push @lines,$line;
					$position++;
				}
			}
			close $fh;
		}
	}
	my %ignoredirs;
	map $ignoredirs{$_}=1,@ignore_dirs;

	File::Find::find({
		wanted=>sub{
			if (-f) {
				if (m#^FAI_CLASSES$#) {
					read_class_file($File::Find::dir,$_);
				}
			}
		},
		# remove dirs-to-ignore in preprocess step
		preprocess=>sub{grep ! (-d and exists($ignoredirs{$_}) or m#^(last|fai\.)#),@_}},
		$log_topdir);
}

sub HELP_MESSAGE {
	my $name = basename($0);
	print << "EOF";
Usage: $name <fai-log-topdir>
EOF
	exit 1;
}

getopts('h');
HELP_MESSAGE() if ($opt_h);
HELP_MESSAGE() if ($#ARGV < 0);

$log_topdir=$ARGV[0];
scan_log();

print join("\n",sort @lines);
