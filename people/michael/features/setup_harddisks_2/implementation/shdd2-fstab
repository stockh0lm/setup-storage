#!/usr/bin/perl -w

#*********************************************************************
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# A copy of the GNU General Public License is available as
# `/usr/share/common-licences/GPL' in the Debian GNU/Linux distribution
# or on the World Wide Web at http://www.gnu.org/copyleft/gpl.html. You
# can also obtain it by writing to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#*********************************************************************

use strict;

################################################################################
#
# @file shdd2-fstab
#
# @brief Generate an fstab file as appropriate for the configuration
#
# $Id$
#
# @author Christian Kern, Michael Tautschnig
# @date Sun Jul 23 16:09:36 CEST 2006
#
################################################################################

package FAI;

################################################################################
#
# @brief this function generates the fstab file from our representation of the
# partitions to be created. Call this function only with one parameter,
# the rest is used for recursion.
#
# @reference hash_ref to our representation of the partitions to be created
# @param modus help variable for the recursion. holds the value wheter we are
# opertationing in physical partition, lvm or raid mode
#
# @param device help variable, holds the actual device
#
# @reference listref help variable, holding the reference to the list which
# contains the lines of the fstab file to be generated
#
# @param call_count holds the actual recursion depth
#
# @return 0
#
################################################################################
sub generate_fstab
{

  # MT: TODO - CONT HERE
  my ( $hash_ref, $modus, $device, $listref, $call_count ) = @_;

  #first check if we have already a list, when not, create one
  if ( !$listref )
  {
    my @newlist = ();
    $listref = \@newlist;
  }

#check if call_count is set, if not, the function is called the first time, set it
  if ( !$call_count )
  {
    $call_count = 1;
  }
  else
  {

    #if we go deaper, increment it
    $call_count++;
  }

  # go through all drives, lvms, raids
  foreach my $key ( keys %$hash_ref )
  {

    if ( ref( $hash_ref->{$key} ) && $key =~ /^PHY_(.*)$/ )
    {

      #set the modus to physical drive partition
      $modus  = "PHY";
      $device = $1;
    }

    # check if we are at the important place for the fstab file
    if ( ref( $hash_ref->{$key} ) && $key eq "partitions" )
    {

# every partition means one line in fstab, let's get the information about each one
      foreach my $partition ( keys %{ $hash_ref->{$key} } )
      {
        my $p_ref = $hash_ref->{$key}->{$partition};
        if ( !$p_ref->{'size'}->{'extended'} )
        {
          my @fstab_line = ();
          push @fstab_line, $device . $partition;
          push @fstab_line, $p_ref->{'mountpoint'};
          push @fstab_line, $p_ref->{'filesystem'};
          push @fstab_line, $p_ref->{'mount_options'};
          push @fstab_line, 0;
          if ( $p_ref->{'mountpoint'} eq "/root" )
          {
            push @fstab_line, 1;
          }
          else
          {
            push @fstab_line, 2;
          }

#lets join the columns of one line with tabs, and the push it to our fstab line array
          push @$listref, join( "\t", @fstab_line );
        }

      }

    }
    if ( ref( $hash_ref->{$key} ) )
    {
      &generate_fstab( $hash_ref->{$key}, $modus, $device, $listref,
        $call_count );
    }

  }
  if ( $call_count eq 1 )
  {

    #if we are at highes level, lets return the listref
    return @$listref;
  }
}

1;

