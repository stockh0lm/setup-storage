#!/usr/bin/perl -w

#*********************************************************************
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# A copy of the GNU General Public License is available as
# `/usr/share/common-licences/GPL' in the Debian GNU/Linux distribution
# or on the World Wide Web at http://www.gnu.org/copyleft/gpl.html. You
# can also obtain it by writing to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#*********************************************************************

use strict;

################################################################################
#
# @file shdd2-commands
#
# @brief Build the required commands using the config stored in %FAI::configs
#
# $Id$
#
# @author Christian Kern, Michael Tautschnig
# @date Sun Jul 23 16:09:36 CEST 2006
#
################################################################################

package FAI;

################################################################################
#
# @brief Using the configurations from %FAI::configs, a list of commands is
# build
#
# The list is @FAI::commands
#
################################################################################
sub build_commands
{

  #TODO: remove
  $FAI::current_config{"/dev/hda"}{"disklabel"} = "msdos";

  # loop through all configs
  foreach my $config ( keys %FAI::configs )
  {
    # TODO implement RAID/LVM support
    if ( $config eq "RAID" || $config =~ /^VG_/ )
    {
      # TODO
      next;
    }
    # configure a physical device
    elsif ( $config =~ /^PHY_(.*)$/ )
    {
      # the device to be configured
      my $disk        = $1;
      # a list of partitions that must be preserved - TODO ???
      my @to_preserve = ();
      # the index of the existing extended partiton
      my $extended    = -1;

      # the desired disklabel - TODO ???
      my $target_label = $FAI::configs{$config}{'disklabel'};
      # the current disklabel - TODO ???
      my $source_label = $FAI::current_config{$disk}{'disklabel'};

      # find any existing extended partition on msdos disklabels
      if ( $FAI::current_config{$disk}{"disklabel"} eq "msdos" )
      {
        # loop over all existing partitions
        foreach
        my $part_id ( sort keys %{ $FAI::current_config{$disk}{"partitions"} } )
        {
          if ( $FAI::current_config{$disk}{"partitions"}{$part_id}{"is_extended"} == 1 )
          {
            # TODO: should be handled properly
            ( $extended == -1 ) or die "INTERNAL ERROR: Can't handle more than 1
            extended partition\n";
            # set the id of the extended partition
            $extended = $part_id;
          }
        }
      }

      # find partitions that should be preserved or resized
      # MT: TODO - CONT here
      foreach
        my $part_id ( sort keys %{ $FAI::configs{$config}{"partitions"} } )
      {

        if (
          $FAI::configs{$config}{"partitions"}{$part_id}{"size"}{"preserve"} ==
          1
          || $FAI::configs{$config}{"partitions"}{$part_id}{"size"}{"resize"} ==
          1 )
        {
          if ( !defined( $FAI::current_config{$disk}{"partitions"}{$part_id} ) )
          {
            die "$part_id can't be preserved, it does not exist.\n";
          }
          else
          {
            push @to_preserve, $part_id;
            if ( $extended > -1
              && $part_id > 4
              && $FAI::current_config{$disk}{"disklabel"} eq "msdos" )
            {
              push @to_preserve, $extended;
              $extended = -1;
            }
          }
        }

      }
      @to_preserve = sort { $a <=> $b } @to_preserve;

      if ( $target_label ne $source_label )
      {
        if ( scalar(@to_preserve) > 0 )
        {
          die "Can't change disklabel, partitions are to be preserved!\n";
        }
        else
        {
          push @FAI::commands,
            "$FAI::system_commands{'parted'} $disk mklabel $target_label";
        }
      }
      else
      {
        foreach my $part_id (
          sort keys %{ $FAI::current_config{$disk}{"partitions"} } )
        {
          if ( $to_preserve[0] == $part_id )
          {
            shift @to_preserve;
            next;
          }
          push @FAI::commands,
            "$FAI::system_commands{'parted'} $disk rm $part_id";
        }
      }

      my $next_start = 0;

      foreach
        my $part_id ( sort keys %{ $FAI::configs{$config}{"partitions"} } )
      {
        if (
          $FAI::configs{$config}{"partitions"}{$part_id}{"size"}{"preserve"} ==
          1 )
        {
          if ( !defined( $FAI::current_config{$disk}{"partitions"}{$part_id} ) )
          {
            die "$part_id can't be preserved, it does not exist.\n";
          }
          unless ( $FAI::configs{$config}{"disklabel"} eq "msdos"
            && $FAI::configs{$config}{"partitions"}{$part_id}{"size"}
            {"extended"} == 1 )
          {
            $next_start =
              $FAI::current_config{$disk}{"partitions"}{$part_id}{"end_byte"} +
              1;
          }
        }
        elsif (
          $FAI::configs{$config}{"partitions"}{$part_id}{"size"}{"resize"} ==
          1 )
        {
          if ( !defined( $FAI::current_config{$disk}{"partitions"}{$part_id} ) )
          {
            die "$part_id can't be resized, it does not exist.\n";
          }
          elsif ( $FAI::current_config{$disk}{"partitions"}{"filesystem"} ne
            $FAI::configs{$config}{"partitions"}{$part_id}{"filesystem"} )
          {
            die "Filesystem change has been requested for $part_id, can't
            resize\n";
          }
          my $part_size =
            $FAI::configs{$config}{"partitions"}{"size"}{"eff_size"} +
            $next_start - 1;
          push @FAI::commands,
            "$FAI::system_commands{'parted'} $disk resize $part_id $next_start"
            . "B "
            . $part_size . "B";
          unless ( $FAI::configs{$config}{"disklabel"} eq "msdos"
            && $FAI::configs{$config}{"partitions"}{$part_id}{"size"}
            {"extended"} == 1 )
          {
            $next_start = $part_size + 1;
          }
        }
        else
        {
          my $part_type = "primary";
          if ( $FAI::configs{$config}{"disklabel"} eq "msdos" )
          {
            if ( $FAI::configs{$config}{"partitions"}{$part_id}{"size"}
              {"extended"} == 1 )
            {
              $part_type = "extended";
            }
            elsif ( $part_id > 4 )
            {
              $part_type = "logical";
            }
          }
          my $part_size =
            $FAI::configs{$config}{"partitions"}{$part_id}{"size"}{"eff_size"} +
            $next_start - 1;
          push @FAI::commands,
"$FAI::system_commands{'parted'} $disk mkpart $part_type $next_start"
            . "B "
            . $part_size . "B";
          unless ( $FAI::configs{$config}{"disklabel"} eq "msdos"
            && $FAI::configs{$config}{"partitions"}{$part_id}{"size"}
            {"extended"} == 1 )
          {
            $next_start = $part_size + 1;
          }
        }
      }
    }
  }
}

1;

