2010-05-27  Julien BLACHE <jblache@debian.org>
	* lib/setup-storage/Commands.pm: support the TMPFS key where necessary.
	* lib/setup-storage/Fstab.pm: add support for tmpfs mounts.
	* lib/setup-storage/Parser.pm: add a new tmpfs stanza, a new tmpfs volume
	type and tmpfs_size (slightly differing from the regular size, no range
	support).
	* man/setup-storage.8: document the tmpfs stanza.

Index: trunk/lib/setup-storage/Commands.pm
===================================================================
--- trunk.orig/lib/setup-storage/Commands.pm
+++ trunk/lib/setup-storage/Commands.pm	
@@ -236,8 +236,8 @@
 sub build_raid_commands {
 
   foreach my $config (keys %FAI::configs) { # loop through all configs
-    # no LVM or physical devices here
-    next if ($config eq "CRYPT" || $config =~ /^VG_./ || $config =~ /^PHY_./);
+    # no encrypted, tmpfs, LVM or physical devices here
+    next if ($config eq "CRYPT" || $config eq "TMPFS" || $config =~ /^VG_./ || $config =~ /^PHY_./);
     ($config eq "RAID") or &FAI::internal_error("Invalid config $config");
 
     # create all raid devices
@@ -613,8 +613,8 @@
   # loop through all configs
   foreach my $config (keys %FAI::configs) {
 
-    # no physical devices, RAID or encrypted here
-    next if ($config =~ /^PHY_./ || $config eq "RAID" || $config eq "CRYPT");
+    # no physical devices, RAID, encrypted or tmpfs here
+    next if ($config =~ /^PHY_./ || $config eq "RAID" || $config eq "CRYPT" || $config eq "TMPFS");
     ($config =~ /^VG_(.+)$/) or &FAI::internal_error("Invalid config $config");
     next if ($1 eq "--ANY--");
     my $vg = $1; # the volume group
@@ -1026,8 +1026,8 @@
 
   # loop through all configs
   foreach my $config ( keys %FAI::configs ) {
-    # no RAID, encrypted or LVM devices here
-    next if ($config eq "RAID" || $config eq "CRYPT" || $config =~ /^VG_./);
+    # no RAID, encrypted, tmpfs or LVM devices here
+    next if ($config eq "RAID" || $config eq "CRYPT" || $config eq "TMPFS" || $config =~ /^VG_./);
     ($config =~ /^PHY_(.+)$/) or &FAI::internal_error("Invalid config $config");
     my $disk = $1; # the device to be configured
 
Index: trunk/lib/setup-storage/Fstab.pm
===================================================================
--- trunk.orig/lib/setup-storage/Fstab.pm
+++ trunk/lib/setup-storage/Fstab.pm	
@@ -58,9 +58,10 @@
   push @fstab_line, ($d_ref->{mountpoint}, $d_ref->{filesystem},
     $d_ref->{mount_options}, 0, 2);
   # order of filesystem checks: the root filesystem gets a 1, the others
-  # get 2, swap gets 0
+  # get 2, swap and tmpfs get 0
   $fstab_line[-1] = 1 if ($d_ref->{mountpoint} eq "/");
   $fstab_line[-1] = 0 if ($d_ref->{filesystem} eq "swap");
+  $fstab_line[-1] = 0 if ($d_ref->{filesystem} eq "tmpfs");
 
   # set the ROOT_PARTITION variable, if this is the mountpoint for /
   $FAI::disk_var{ROOT_PARTITION} = $name
@@ -168,6 +169,9 @@
         return $this_mp if ($this_mp eq "/boot");
         $mnt_point = $this_mp if ($this_mp eq "/");
       }
+    } elsif ($c eq "TMPFS") {
+      # not usable for /boot
+      next;
     } else {
       &FAI::internal_error("Unexpected key $c");
     }
@@ -312,6 +316,26 @@
 
         push @fstab, &FAI::create_fstab_line($c_ref, $device_name, $device_name);
       }
+    } elsif ($c eq "TMPFS") {
+      foreach my $v (keys %{ $config->{$c}->{volumes} }) {
+        my $c_ref = $config->{$c}->{volumes}->{$v};
+
+        next if ($c_ref->{mountpoint} eq "-");
+
+        ($c_ref->{mountpoint} eq "/boot" || ($c_ref->{mountpoint} eq "/" &&
+            !defined ($FAI::disk_var{BOOT_PARTITION}))) and
+          die "Boot partition cannot be a tmpfs\n";
+
+	if (($c_ref->{mount_options} =~ m/size=/) || ($c_ref->{mount_options} =~ m/nr_blocks=/)) {
+          warn "Specified tmpfs size for $c_ref->{mountpoint} ignored as mount options contain size= or nr_blocks=\n";
+        } else {
+	  $c_ref->{mount_options} .= "," if ($c_ref->{mount_options} ne "");
+          # Size will be in % or MiB
+	  $c_ref->{mount_options} .= "size=" . $c_ref->{size};
+	}
+
+        push @fstab, &FAI::create_fstab_line($c_ref, "tmpfs", "tmpfs");
+      }
     } else {
       &FAI::internal_error("Unexpected key $c");
     }
Index: trunk/lib/setup-storage/Parser.pm
===================================================================
--- trunk.orig/lib/setup-storage/Parser.pm
+++ trunk/lib/setup-storage/Parser.pm	
@@ -398,6 +398,12 @@
           # exit config mode
           $FAI::device = "";
         }
+        | /^tmpfs/
+        {
+          $FAI::device = "TMPFS";
+          $FAI::configs{$FAI::device}{fstabkey} = "device";
+          $FAI::configs{$FAI::device}{volumes} = {};
+        }
         | /^disk(\d+)/
         {
           # check, whether parted is available
@@ -616,6 +622,26 @@
           $FAI::partition_pointer = (\%FAI::configs)->{CRYPT}->{volumes}->{$vol_id};
         }
         mountpoint devices filesystem mount_options lv_or_fsopts
+        | /^tmpfs\s+/
+        {
+          ($FAI::device eq "TMPFS") or die "tmpfs entry invalid in this context\n";
+          defined ($FAI::configs{TMPFS}) or &FAI::internal_error("TMPFS entry missing");
+
+          my $vol_id = 0;
+          foreach my $ex_vol_id (&FAI::numsort(keys %{ $FAI::configs{TMPFS}{volumes} })) {
+            defined ($FAI::configs{TMPFS}{volumes}{$ex_vol_id}{device}) or last;
+            $vol_id++;
+          }
+
+          $FAI::configs{TMPFS}{volumes}{$vol_id}{device} = "tmpfs";
+          $FAI::configs{TMPFS}{volumes}{$vol_id}{filesystem} = "tmpfs";
+
+          # We don't do preserve for tmpfs
+          $FAI::configs{TMPFS}{volumes}{$vol_id}{preserve} = 0;
+
+          $FAI::partition_pointer = (\%FAI::configs)->{TMPFS}->{volumes}->{$vol_id};
+        }
+        mountpoint tmpfs_size mount_options
         | type mountpoint size filesystem mount_options lv_or_fsopts
 
     type: 'primary'
@@ -740,6 +766,27 @@
         }
         | <error: invalid partition size near "$text">
 
+    tmpfs_size: /^(RAM:(\d+%)|\d+[kMGTPiB]*)\s+/
+        {
+          my $size;
+
+          # convert the units, if necessary
+          # A percentage is kept as is as tmpfs handles it
+          if (defined($2)) {
+            $size = $2;
+          } else {
+            $size = $1;
+            $size .= "MiB" if ($size =~ /\d\s*$/);
+            $size  = &FAI::convert_unit($size);
+            # Size in MiB for tmpfs
+            $size .= "m";
+          }
+
+          # enter the size into the hash
+          $FAI::partition_pointer->{size} = $size;
+        }
+        | <error: invalid tmpfs size near "$text">
+
     devices: /^([^\d,:\s\-][^,:\s]*(:(spare|missing))*(,[^,:\s]+(:(spare|missing))*)*)/
         {
           # split the device list by ,
Index: trunk/lib/setup-storage/Sizes.pm
===================================================================
--- trunk.orig/lib/setup-storage/Sizes.pm
+++ trunk/lib/setup-storage/Sizes.pm	
@@ -201,8 +201,8 @@
   # loop through all device configurations
   foreach my $config (keys %FAI::configs) {
 
-    # for RAID, encrypted or physical disks there is nothing to be done here
-    next if ($config eq "RAID" || $config eq "CRYPT" || $config =~ /^PHY_./);
+    # for RAID, encrypted, tmpfs or physical disks there is nothing to be done here
+    next if ($config eq "RAID" || $config eq "CRYPT" || $config eq "TMPFS" || $config =~ /^PHY_./);
     ($config =~ /^VG_(.+)$/) or &FAI::internal_error("invalid config entry $config");
     next if ($1 eq "--ANY--");
     my $vg = $1; # the volume group name
@@ -597,8 +597,8 @@
   # loop through all device configurations
   foreach my $config (keys %FAI::configs) {
 
-    # for RAID, encrypted or LVM, there is nothing to be done here
-    next if ($config eq "RAID" || $config eq "CRYPT" || $config =~ /^VG_./);
+    # for RAID, encrypted, tmpfs or LVM, there is nothing to be done here
+    next if ($config eq "RAID" || $config eq "CRYPT" || $config eq "TMPFS" || $config =~ /^VG_./);
     ($config =~ /^PHY_(.+)$/) or &FAI::internal_error("invalid config entry $config");
     # nothing to be done, if this is a configuration for a virtual disk
     next if $FAI::configs{$config}{virtual};
Index: trunk/lib/setup-storage/Volumes.pm
===================================================================
--- trunk.orig/lib/setup-storage/Volumes.pm
+++ trunk/lib/setup-storage/Volumes.pm	
@@ -65,6 +65,9 @@
     } elsif ($config eq "CRYPT") {
       # devices must be one of the above already
       next;
+    } elsif ($config eq "TMPFS") {
+      # no devices
+      next;
     } else {
       &FAI::internal_error("Unexpected key $config");
     }
@@ -555,6 +558,9 @@
     } elsif ($config eq "CRYPT") {
       # We don't do preserve for encrypted partitions
       next;
+    } elsif ($config eq "TMPFS") {
+      # We don't do preserve for tmpfs
+      next;
     } else {
       &FAI::internal_error("Unexpected key $config");
     }
Index: trunk/man/setup-storage.8
===================================================================
--- trunk.orig/man/setup-storage.8
+++ trunk/man/setup-storage.8	
@@ -142,6 +142,8 @@
 .br
            | disk_config cryptsetup( <cryptsetupoption>)*
 .br
+           | disk_config tmpfs
+.br
            | disk_config end 
 .br
            | disk_config disk[[:digit:]]+( <option>)*
@@ -294,6 +296,10 @@
 .br
            /* lvm vg */
 .br
+           | tmpfs <mountpoint> <tmpfs_size> <mount_options>
+.br
+           /* tmpfs volume */
+.br
 
 
 type ::= primary
@@ -372,6 +378,14 @@
 .br
 
 
+tmpfs_size ::= (RAM:[[:digit:]]+%|[[:digit:]]+[kKMGTPiB]*)
+.br
+         /* tmpfs size in percentage of the total RAM or fixed size in
+.br
+          kilo (KiB), mega (default, MiB), giga (GiB), tera (TiB) or petabytes (PiB).
+.br
+
+
 mount_options ::= [^[:space:]]+
 .br
 
@@ -509,6 +523,25 @@
 .sp
 .fi
 .PP
+
+.TP
+tmpfs example
+.sp
+.nf
+.ta 10n 20n 30n 40n 50n
+disk_config tmpfs
+tmpfs	/tmp	RAM:20%	defaults
+tmpfs	/scratch	3GiB	defaults
+.sp
+.fi
+.PP
+.IP \(bu
+Mount a tmpfs on /tmp with a maximum size equal to 20% of the total amount of
+RAM in the machine. This is equivalent to using size=20% in the tmpfs mount
+options.
+.IP \(bu
+Mount a tmpfs on /scratch with a maximum size of 3 GiB.
+
 .SH CAVEATS
 .IP \(bu
 Partition UUID cannot be obtained: In case a partition was previously used as
