2010-06-28  Michael Tautschnig  <mt@debian.org>

	* setup-storage/{Commands.pm,Volumes.pm}: Completed support for preserve in
		LVM/RAID contexts; extended checking for volume groups that remain alive,
		fixed bug in LV resize code, disable existing volume groups, remove
		non-preserved volume groups (thanks Mathieu Alorent <malorent@echo.fr> for
		extensive testing).
Index: trunk/lib/setup-storage/Commands.pm
===================================================================
--- trunk.orig/lib/setup-storage/Commands.pm
+++ trunk/lib/setup-storage/Commands.pm	
@@ -143,14 +143,15 @@
 
   my ($d, $t) = @_;
   my ($i_p_d, $disk, $part_no) = &FAI::phys_dev($d);
-  return unless $i_p_d;
+  return 0 unless $i_p_d;
   # make sure this device really exists (we can't check for the partition
   # as that may be created later on
   (-b $disk) or die "Specified disk $disk does not exist in this system!\n";
   # set the raid/lvm unless this is an entire disk flag
   my $cmd = "parted -s $disk set $part_no $t on";
   $cmd = "true" if ($part_no == -1);
-  &FAI::push_command( $cmd, "exist_$d", "type_${t}_$d" );
+  &FAI::push_command( $cmd, "cleared2_$disk,exist_$d", "type_${t}_$d" );
+  return 1;
 }
 
 ################################################################################
@@ -245,12 +246,17 @@
 
       # keep a reference to the current volume
       my $vol = (\%FAI::configs)->{$config}->{volumes}->{$id};
+
+      # if it is a volume that has to be preserved, there is not much to be
+      # done; its existance has been checked in propagate_and_check_preserve
+      if ($vol->{preserve}) {
+        &FAI::push_command("true", "", "exist_/dev/md$id");
+        next;
+      }
+
       # the desired RAID level
       my $level = $vol->{mode};
 
-      warn "RAID implementation is incomplete - preserve is not supported\n" if
-        ($vol->{preserve});
-
       # prepend "raid", if the mode is numeric-only
       $level = "raid$level" if ($level =~ /^\d+$/);
 
@@ -308,29 +314,6 @@
 
 ################################################################################
 #
-# @brief Erase the LVM signature from a list of devices that should be prestine
-# in order to avoid confusion of the lvm tools
-#
-################################################################################
-sub erase_lvm_signature {
-
-  my ($devices_aref) = @_;
-  # first remove the dm_mod module to prevent ghost lvm volumes 
-  # from existing
-  # push @FAI::commands, "modprobe -r dm_mod";
-  # zero out (broken?) lvm signatures
-  # push @FAI::commands, "dd if=/dev/zero of=$_ bs=1 count=1"
-  #   foreach ( @{$devices_aref} );
-  my $device_list = join (" ", @{$devices_aref});
-  $FAI::debug and print "Erased devices: $device_list\n"; 
-  &FAI::push_command( "pvremove -ff -y $device_list", "", "pv_sigs_removed" );
-
-  # reload module
-  # push @FAI::commands, "modprobe dm_mod";
-}
-
-################################################################################
-#
 # @brief Create the volume group $config, unless it exists already; if the
 # latter is the case, only add/remove the physical devices
 #
@@ -343,24 +326,6 @@
   ($config =~ /^VG_(.+)$/) and ($1 ne "--ANY--") or &FAI::internal_error("Invalid config $config");
   my $vg = $1; # the actual volume group
 
-  my $vg_exists = 0;
-  if (defined ($FAI::current_lvm_config{$vg})) {
-    $vg_exists = 1;
-    foreach my $dev (@{ $FAI::current_lvm_config{$vg}{"physical_volumes"} }) {
-      my ($i_p_d, $disk, $part_no) = &FAI::phys_dev($dev);
-      # if this is not a physical disk, just assume that the volume group will
-      # not exist anymore
-      if ($i_p_d) {
-        defined ($FAI::configs{"PHY_$disk"}) or next;
-        defined ($FAI::configs{"PHY_$disk"}{partitions}{$part_no}) and
-          ($FAI::configs{"PHY_$disk"}{partitions}{$part_no}{size}{preserve}) and
-          next;
-      }
-      $vg_exists = 0;
-      last;
-    }
-  }
-
   my ($pv_create_options) = $FAI::configs{$config}{pvcreateopts};
   my ($vg_create_options) = $FAI::configs{$config}{vgcreateopts};
   # prevent warnings of uninitialized variables
@@ -368,59 +333,82 @@
   $vg_create_options = '' unless $vg_create_options;
   print "/dev/$vg PV create_options: $pv_create_options\n" if ($FAI::debug && $pv_create_options);
   print "/dev/$vg VG create_options: $vg_create_options\n" if ($FAI::debug && $vg_create_options);
+
   # create the volume group, if it doesn't exist already
-  if (!$vg_exists) {
-    # create all the devices
-    my @devices = ();
-    push @devices, &FAI::enc_name($_) foreach (keys %{ $FAI::configs{$config}{devices} });
-    &FAI::erase_lvm_signature(\@devices);
-    &FAI::push_command( "pvcreate $pv_create_options $_",
-      "pv_sigs_removed,exist_$_", "pv_done_$_") foreach (@devices);
-    # create the volume group
+  if (!defined($FAI::configs{"VG_$vg"}{exists})) {
     my $pre_dev = "";
-    $pre_dev .= ",exist_$_,pv_done_$_" foreach (@devices);
+    my $devs = "";
+    # create all the devices
+    foreach my $d (keys %{ $FAI::configs{$config}{devices} }) {
+      my $dev = &FAI::enc_name($d);
+
+      # set proper partition types for LVM
+      my $type_pre = "";
+      $type_pre .= ",type_lvm_$dev" if (&FAI::set_partition_type_on_phys_dev($dev, "lvm"));
+
+      &FAI::push_command( "pvcreate $pv_create_options $dev",
+        "all_pv_sigs_removed,exist_$dev$type_pre", "pv_done_$dev");
+      $devs .= " $dev";
+      $pre_dev .= ",pv_done_$dev";
+    }
     $pre_dev =~ s/^,//;
-    &FAI::push_command( "vgcreate $vg_create_options $vg " . join (" ",
-        @devices), "$pre_dev", "vg_created_$vg" );
+
+    # create the volume group
+    &FAI::push_command( "vgcreate $vg_create_options $vg $devs",
+      "$pre_dev", "vg_created_$vg" );
+
     # we are done
     return;
   }
 
   # otherwise add or remove the devices for the volume group, run pvcreate
   # where needed
-  # the list of devices to be created
-  my %new_devs = ();
+  # the devices to be removed later on
+  my %rm_devs = ();
+  @rm_devs{ @{ $FAI::current_lvm_config{$vg}{"physical_volumes"} } } = ();
 
-  # create an undefined entry for each new device
-  @new_devs{ keys %{ $FAI::configs{$config}{devices} } } = ();
+  # all devices of this VG
+  my @all_devices = ();
 
+  # the list of devices to be created
   my @new_devices = ();
-  push @new_devices, &FAI::enc_name($_) foreach (keys %new_devs);
 
-  # &FAI::erase_lvm_signature( \@new_devices );
+  # create an undefined entry for each device
+  foreach my $d (keys %{ $FAI::configs{$config}{devices} }) {
+    my $denc = &FAI::enc_name($d);
+    push @all_devices, $denc;
+    push @new_devices, $denc unless (exists($rm_devs{$denc}));
+  }
+
+  # remove remaining devices from the list
+  delete $rm_devs{$_} foreach (@all_devices);
 
   # create all the devices
-  &FAI::push_command( "pvcreate $pv_create_options $_", "exist_$_", "pv_done_$_"
-    ) foreach (@new_devices);
+  my $pre_dev = "vg_exists_$vg";
+  foreach my $dev (@new_devices) {
+    # set proper partition types for LVM
+    my $type_pre = "";
+    $type_pre .= ",type_lvm_$dev" if (&FAI::set_partition_type_on_phys_dev($dev, "lvm"));
 
-  # extend the volume group by the new devices (includes the current ones)
-  my $pre_dev = "";
-  $pre_dev .= ",pv_done_$_" foreach (@new_devices);
+    &FAI::push_command( "pvcreate $pv_create_options $dev",
+      "all_pv_sigs_removed,exist_$dev$type_pre", "pv_done_$dev");
+    $pre_dev .= ",pv_done_$dev";
+  }
   $pre_dev =~ s/^,//;
-  &FAI::push_command( "vgextend $vg " . join (" ", @new_devices), "$pre_dev",
-    "vg_extended_$vg" );
 
-  # the devices to be removed
-  my %rm_devs = ();
-  @rm_devs{ @{ $FAI::current_lvm_config{$vg}{"physical_volumes"} } } = ();
 
-  # remove remaining devices from the list
-  delete $rm_devs{$_} foreach (@new_devices);
+  # extend the volume group by the new devices
+  if (scalar (@new_devices)) {
+    &FAI::push_command( "vgextend $vg " . join (" ", @new_devices), "$pre_dev",
+      "vg_extended_$vg" );
+  } else {
+    &FAI::push_command( "true", "all_pv_sigs_removed,$pre_dev", "vg_extended_$vg" );
+  }
 
   # run vgreduce to get them removed
   if (scalar (keys %rm_devs)) {
     $pre_dev = "";
-    $pre_dev .= ",pv_done_$_" foreach (keys %rm_devs);
+    $pre_dev .= ",exist_$_" foreach (keys %rm_devs);
     &FAI::push_command( "vgreduce $vg " . join (" ", keys %rm_devs),
       "vg_extended_$vg$pre_dev", "vg_created_$vg" );
   } else {
@@ -442,25 +430,6 @@
   ($config =~ /^VG_(.+)$/) and ($1 ne "--ANY--") or &FAI::internal_error("Invalid config $config");
   my $vg = $1; # the actual volume group
 
-  my $lv_rm_pre = "";
-  my $lv_resize_pre = "";
-  # remove, resize, create the logical volumes
-  # remove all volumes that do not exist anymore or need not be preserved
-  foreach my $lv (keys %{ $FAI::current_lvm_config{$vg}{volumes} }) {
-    # skip preserved/resized volumes
-    if (defined ( $FAI::configs{$config}{volumes}{$lv})
-      && ($FAI::configs{$config}{volumes}{$lv}{size}{preserve} == 1)) {
-      $lv_resize_pre .= ",lv_resize_$vg/$lv" if
-        $FAI::configs{$config}{volumes}{$lv}{size}{resize};
-      next;
-    }
-
-    &FAI::push_command( "lvremove -f $vg/$lv", "vg_enabled_$vg", "lv_rm_$vg/$lv");
-    $lv_rm_pre .= ",lv_rm_$vg/$lv";
-  }
-  $lv_rm_pre =~ s/^,//;
-  $lv_resize_pre =~ s/^,//;
-
   # now create or resize the configured logical volumes
   foreach my $lv (keys %{ $FAI::configs{$config}{volumes} }) {
     # reference to the size of the current logical volume
@@ -483,14 +452,14 @@
         $FAI::current_lvm_config{$vg}{volumes}{$lv}{size})
       {
         &FAI::push_command( "parted -s /dev/$vg/$lv resize 1 0 " . $lv_size->{eff_size} .  "B",
-          "vg_enabled_$vg,$lv_rm_pre", "lv_shrink_$vg/$lv" );
+          "vg_enabled_$vg,exist_/dev/$vg/$lv", "lv_shrink_$vg/$lv" );
         &FAI::push_command( "lvresize -L " . $lv_size->{eff_size} . " $vg/$lv",
-          "vg_enabled_$vg,$lv_rm_pre,lv_shrink_$vg/$lv", "lv_created_$vg/$lv" );
+          "vg_enabled_$vg,lv_shrink_$vg/$lv", "lv_created_$vg/$lv" );
       } else {
         &FAI::push_command( "lvresize -L " . $lv_size->{eff_size} . " $vg/$lv",
-          "vg_enabled_$vg,$lv_rm_pre", "lv_grow_$vg/$lv" );
+          "vg_enabled_$vg,exist_/dev/$vg/$lv", "lv_grow_$vg/$lv" );
         &FAI::push_command( "parted -s /dev/$vg/$lv resize 1 0 " . $lv_size->{eff_size} .  "B",
-          "vg_enabled_$vg,$lv_rm_pre,lv_grow_$vg/$lv", "exist_/dev/$vg/$lv" );
+          "vg_enabled_$vg,lv_grow_$vg/$lv", "exist_/dev/$vg/$lv" );
       }
 
       next;
@@ -499,10 +468,10 @@
     my ($create_options) = $FAI::configs{$config}{volumes}{$lv}{lvcreateopts};
     # prevent warnings of uninitialized variables
     $create_options = '' unless $create_options;
-  print "/dev/$vg/$lv LV create_options: $create_options\n" if ($FAI::debug && $create_options);
+    print "/dev/$vg/$lv LV create_options: $create_options\n" if ($FAI::debug && $create_options);
     # create a new volume
     &FAI::push_command( "lvcreate $create_options -n $lv -L " .
-      $lv_size->{eff_size} . " $vg", "vg_enabled_$vg,$lv_rm_pre",
+      $lv_size->{eff_size} . " $vg", "vg_enabled_$vg",
       "exist_/dev/$vg/$lv" );
 
     # create the filesystem on the volume
@@ -513,6 +482,85 @@
 
 ################################################################################
 #
+# @brief Remove existing volume group if underlying devices will be modified,
+# otherwise add proper exist_ preconditions
+#
+################################################################################
+sub cleanup_vg {
+
+  my ($vg) = @_;
+  my $clear_vg = 0;
+
+  foreach my $dev (@{ $FAI::current_lvm_config{$vg}{"physical_volumes"} }) {
+    my ($i_p_d, $disk, $part_no) = &FAI::phys_dev($dev);
+    if ($i_p_d) {
+      defined ($FAI::configs{"PHY_$disk"}) or next;
+      defined ($FAI::configs{"PHY_$disk"}{partitions}{$part_no}) and
+        ($FAI::configs{"PHY_$disk"}{partitions}{$part_no}{size}{preserve}) and
+        next;
+    } elsif ($dev =~ m{^/dev/md[\/]?(\d+)$}) {
+      my $vol = $1;
+      defined ($FAI::configs{RAID}{volumes}{$vol}) or next;
+      next if (1 == $FAI::configs{RAID}{volumes}{$vol}{preserve});
+    } elsif ($dev =~ m{^/dev/([^/\s]+)/([^/\s]+)$}) {
+      my $ivg = $1;
+      my $lv = $2;
+      defined($FAI::configs{"VG_$ivg"}{volumes}{$lv}) or next;
+      next if (1 == $FAI::configs{"VG_$ivg"}{volumes}{$lv}{size}{preserve});
+    } else {
+      warn "Don't know how to check preservation of $dev\n";
+      next;
+    }
+    $clear_vg = 1;
+    last;
+  }
+
+  if (0 == $clear_vg) {
+    my $vg_setup_pre = "vgchange_a_n";
+    if (defined($FAI::configs{"VG_$vg"}{volumes})) {
+      $FAI::configs{"VG_$vg"}{exists} = 1;
+
+      # remove all volumes that do not exist anymore or need not be preserved
+      foreach my $lv (keys %{ $FAI::current_lvm_config{$vg}{volumes} }) {
+        # skip preserved/resized volumes
+        if (defined ( $FAI::configs{"VG_$vg"}{volumes}{$lv})) {
+          if ($FAI::configs{"VG_$vg"}{volumes}{$lv}{size}{preserve} == 1 ||
+            $FAI::configs{"VG_$vg"}{volumes}{$lv}{size}{resize} == 1) {
+            &FAI::push_command("true", "vgchange_a_n", "exist_/dev/$vg/$lv");
+            next;
+          }
+        }
+
+        &FAI::push_command( "lvremove -f $vg/$lv", "vgchange_a_n", "lv_rm_$vg/$lv");
+        $vg_setup_pre .= ",lv_rm_$vg/$lv";
+      }
+    } else {
+      &FAI::push_command("true", "vgchange_a_n", "exist_/dev/$vg/$_") foreach
+        (keys %{ $FAI::current_lvm_config{$vg}{volumes} });
+    }
+    &FAI::push_command("true", $vg_setup_pre, "vg_exists_$vg");
+
+    return 0;
+  }
+
+  my $vg_destroy_pre = "vgchange_a_n";
+  foreach my $lv (keys %{ $FAI::current_lvm_config{$vg}{volumes} }) {
+    &FAI::push_command( "lvremove -f $vg/$lv", "vgchange_a_n", "lv_rm_$vg/$lv");
+    $vg_destroy_pre .= ",lv_rm_$vg/$lv";
+  }
+  &FAI::push_command( "vgremove $vg", "$vg_destroy_pre", "vg_removed_$vg");
+
+  # clear all the devices
+  my $devices = "";
+  $devices .= " " . &FAI::enc_name($_) foreach
+    (@{ $FAI::current_lvm_config{$vg}{physical_volumes} });
+  $FAI::debug and print "Erased devices:$devices\n";
+  &FAI::push_command( "pvremove $devices", "", "pv_sigs_removed_$vg" );
+  return 1;
+}
+
+################################################################################
+#
 # @brief Using the configurations from %FAI::configs, a list of commands is
 # built to setup the LVM
 # creates the volume groups, the logical volumes and the filesystems
@@ -520,6 +568,17 @@
 ################################################################################
 sub build_lvm_commands {
 
+  # disable volumes if there are pre-existing ones
+  my $all_vg_pre = "";
+  if (scalar(keys %FAI::current_lvm_config)) {
+    &FAI::push_command("vgchange -a n", "", "vgchange_a_n");
+    foreach my $vg (keys %FAI::current_lvm_config) {
+      $all_vg_pre .= ",pv_sigs_removed_$vg" if (&FAI::cleanup_vg($vg));
+    }
+    $all_vg_pre =~ s/^,//;
+  }
+  &FAI::push_command("true", "$all_vg_pre", "all_pv_sigs_removed");
+
   # loop through all configs
   foreach my $config (keys %FAI::configs) {
 
@@ -529,24 +588,11 @@
     next if ($1 eq "--ANY--");
     my $vg = $1; # the volume group
 
-    # set proper partition types for LVM
-    &FAI::set_partition_type_on_phys_dev($_, "lvm")
-      foreach (keys %{ $FAI::configs{$config}{devices} });
-    my $type_pre = "";
-    foreach my $d (keys %{ $FAI::configs{$config}{devices} }) {
-      $d = &FAI::enc_name($d);
-      if ((&FAI::phys_dev($d))[0]) {
-        $type_pre .= ",type_lvm_$d"
-      } else {
-        $type_pre .= ",exist_$d"
-      }
-    }
-
     # create the volume group or add/remove devices
     &FAI::create_volume_group($config);
     # enable the volume group
     &FAI::push_command( "vgchange -a y $vg",
-      "vg_created_$vg$type_pre", "vg_enabled_$vg" );
+      "vg_created_$vg", "vg_enabled_$vg" );
 
     # perform all necessary operations on the underlying logical volumes
     &FAI::setup_logical_volumes($config);
@@ -755,8 +801,8 @@
     or die "Can't change disklabel, partitions are to be preserved\n";
 
   # write the disklabel to drop the previous partition table
-  &FAI::push_command( "parted -s $disk mklabel $label", "exist_$disk",
-    "cleared1_$disk" );
+  &FAI::push_command( "parted -s $disk mklabel $label",
+    "exist_$disk,all_pv_sigs_removed", "cleared1_$disk" );
 
   &FAI::rebuild_preserved_partitions($config, \@to_preserve);
 
Index: trunk/lib/setup-storage/Volumes.pm
===================================================================
--- trunk.orig/lib/setup-storage/Volumes.pm
+++ trunk/lib/setup-storage/Volumes.pm	
@@ -348,7 +348,6 @@
   foreach my $vg (get_volume_group_list()) {
     # initialise the hash entry
     $FAI::current_lvm_config{$vg}{physical_volumes} = ();
-    &FAI::push_command("true", "", "vg_created_$vg");
 
     # store the vg size in MB
     my %vg_info = get_volume_group_information($vg);
@@ -367,7 +366,6 @@
       $FAI::current_lvm_config{$vg}{volumes}{$short_name}{size} =
         &FAI::convert_unit($lv_info{$lv_name}->{lv_size} .
           $lv_info{$lv_name}->{lv_size_unit});
-      &FAI::push_command("true", "", "exist_/dev/$vg/$short_name");
     }
 
     # store the physical volumes
@@ -418,7 +416,6 @@
     if ($line =~ /^ARRAY \/dev\/md[\/]?(\d+) level=(\S+) num-devices=\d+(\s+|$)/) {
       $id = $1;
       $FAI::current_raid_config{$id}{mode} = $2;
-      &FAI::push_command( "true", "", "exist_/dev/md$id" );
     } elsif ($line =~ /^\s*devices=(\S+)$/) {
       defined($id) or &FAI::internal_error("mdadm ARRAY line not yet seen");
       @{ $FAI::current_raid_config{$id}{devices} } = split (",", $1);
@@ -438,11 +435,17 @@
   my ($device_name) = @_;
   my ($i_p_d, $disk, $part_no) = &FAI::phys_dev($device_name);
 
-  if (1 == $i_p_d && defined($FAI::configs{"PHY_$disk"}{partitions}{$part_no})) {
-    $FAI::configs{"PHY_$disk"}{partitions}{$part_no}{size}{preserve} = 1;
-    $FAI::configs{"PHY_$disk"}{preserveparts} = 1;
-  } elsif ($device_name =~ m{^/dev/md(\d+)$}) {
+  if (1 == $i_p_d) {
+    defined ($FAI::current_config{$disk}{partitions}{$part_no}) or die
+      "Can't preserve $device_name because it does not exist\n";
+    if (defined($FAI::configs{"PHY_$disk"}{partitions}{$part_no})) {
+      $FAI::configs{"PHY_$disk"}{partitions}{$part_no}{size}{preserve} = 1;
+      $FAI::configs{"PHY_$disk"}{preserveparts} = 1;
+    }
+  } elsif ($device_name =~ m{^/dev/md[\/]?(\d+)$}) {
     my $vol = $1;
+    defined ($FAI::current_raid_config{$vol}) or die
+      "Can't preserve $device_name because it does not exist\n";
     if (defined($FAI::configs{RAID}{volumes}{$vol}) && 
         $FAI::configs{RAID}{volumes}{$vol}{preserve} != 1) {
       $FAI::configs{RAID}{volumes}{$vol}{preserve} = 1;
@@ -451,6 +454,8 @@
   } elsif ($device_name =~ m{^/dev/([^/\s]+)/([^/\s]+)$}) {
     my $vg = $1;
     my $lv = $2;
+    defined ($FAI::current_lvm_config{$vg}{volumes}{$lv}) or die
+      "Can't preserve $device_name because it does not exist\n";
     if (defined($FAI::configs{"VG_$vg"}{volumes}{$lv}) &&
         $FAI::configs{"VG_$vg"}{volumes}{$lv}{size}{preserve} != 1) {
       $FAI::configs{"VG_$vg"}{volumes}{$lv}{size}{preserve} = 1;
@@ -481,6 +486,9 @@
               defined($FAI::current_config{$1}{partitions}{$part_id})) ? 1 : 0)
           if (2 == $part->{size}->{preserve});
         next unless ($part->{size}->{preserve} || $part->{size}->{resize});
+        defined ($FAI::current_config{$1}{partitions}{$part_id}) or die
+          "Can't preserve ". &FAI::make_device_name($1, $part->{number})
+            . " because it does not exist\n";
         defined ($part->{size}->{range}) or die
           "Can't preserve ". &FAI::make_device_name($1, $part->{number})
             . " because it is not defined in the current config\n";
@@ -496,10 +504,11 @@
           if (2 == $FAI::configs{$config}{volumes}{$l}{size}{preserve});
         next unless ($FAI::configs{$config}{volumes}{$l}{size}{preserve} == 1 ||
           $FAI::configs{$config}{volumes}{$l}{size}{resize} == 1);
+        defined ($FAI::current_lvm_config{$1}{volumes}{$l}) or die
+          "Can't preserve /dev/$1/$l because it does not exist\n";
         defined ($FAI::configs{$config}{volumes}{$l}{size}{range}) or die
           "Can't preserve /dev/$1/$l because it is not defined in the current config\n";
         &FAI::mark_preserve($_) foreach (keys %{ $FAI::configs{$config}{devices} });
-        last;
       }
     } elsif ($config eq "RAID") {
       # check for volumes that need to be preserved and preserve the underlying
@@ -509,6 +518,8 @@
           (defined($FAI::current_raid_config{$r}) ? 1 : 0)
           if (2 == $FAI::configs{$config}{volumes}{$r}{preserve});
         next unless ($FAI::configs{$config}{volumes}{$r}{preserve} == 1);
+        defined ($FAI::current_raid_config{$r}) or die
+          "Can't preserve /dev/md$r because it does not exist\n";
         defined ($FAI::configs{$config}{volumes}{$r}{devices}) or die
           "Can't preserve /dev/md$r because it is not defined in the current config\n";
         &FAI::mark_preserve($_) foreach (keys %{ $FAI::configs{$config}{volumes}{$r}{devices} });
