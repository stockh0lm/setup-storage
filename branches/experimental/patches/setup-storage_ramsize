2010-05-27  Julien BLACHE <jblache@debian.org>
	* lib/setup-storage/Parser.pm: add support for RAM:XX% in the parser and
	convert_units().
	* man/setup-storage.8: document RAM:XX%.

Index: trunk/lib/setup-storage/Parser.pm
===================================================================
--- trunk.orig/lib/setup-storage/Parser.pm
+++ trunk/lib/setup-storage/Parser.pm	
@@ -307,6 +307,21 @@
 {
   my ($val) = @_;
 
+  if ($val =~ /^RAM:(\d+)%/) {
+      $val = $1 / 100.0;
+
+      ## get total RAM
+      open(F, "/proc/meminfo");
+      my @meminfo = <F>;
+      close F;
+
+      my ($totalmem) = grep /^MemTotal:/, @meminfo;
+      $totalmem =~ s/[^0-9]//g;
+      $totalmem = $totalmem / 1024.0;
+
+      return $val * $totalmem;
+  }
+
   ## don't warn for now, G/GiB/GB are all treated the same way
   ## ($val =~ /([kKMGTP])\s*$/) and
   ##   warn "Using $1 as size modifier is deprecated, please use $1iB or $1B
@@ -673,17 +688,17 @@
           1;
         }
 
-    size: /^(\d+[kMGTP%iB]*(-(\d+[kMGTP%iB]*)?)?)(:resize)?\s+/
+    size: /^((RAM:\d+%|\d+[kMGTP%iB]*)(-(RAM:\d+%|\d+[kMGTP%iB]*)?)?)(:resize)?\s+/
         {
           # complete the size specification to be a range in all cases
           my $range = $1;
           # the size is fixed
-          if (!defined ($2))
+          if (!defined ($3))
           {
             # make it a range of the form x-x
-            $range = "$range-$1";
+            $range = "$range-$2";
           }
-          elsif (!defined ($3))
+          elsif (!defined ($4))
           {
             # range has no upper limit, assume the whole disk
             $range = "${range}100%";
@@ -699,12 +714,12 @@
           # enter the range into the hash
           $FAI::partition_pointer->{size}->{range} = $range;
           # set the resize flag, if required
-          if (defined ($4)) {
+          if (defined ($5)) {
             $FAI::partition_pointer->{size}->{resize} = 1;
             $FAI::configs{$FAI::device}{preserveparts} = 1;
           }
         }
-        | /^(-\d+[kMGTP%iB]*)(:resize)?\s+/
+        | /^(-(RAM:\d+%|\d+[kMGTP%iB]*))(:resize)?\s+/
         {
           # complete the range by assuming 0 as the lower limit 
           my $range = "0$1";
@@ -718,7 +733,7 @@
           # enter the range into the hash
           $FAI::partition_pointer->{size}->{range} = $range;
           # set the resize flag, if required
-          if (defined ($2)) {
+          if (defined ($3)) {
             $FAI::partition_pointer->{size}->{resize} = 1;
             $FAI::configs{$FAI::device}{preserveparts} = 1;
           }
Index: trunk/man/setup-storage.8
===================================================================
--- trunk.orig/man/setup-storage.8
+++ trunk/man/setup-storage.8	
@@ -341,19 +341,19 @@
 .br
 
 
-size ::= [[:digit:]]+[kKMGTP%iB]*(-([[:digit:]]+[kKMGTP%iB]*)?)?(:resize)?
+size ::= (RAM:[[:digit:]]+%|[[:digit:]]+[kKMGTP%iB]*)(-(RAM:[[:digit:]]+%|[[:digit:]]+[kKMGTP%iB]*)?)?(:resize)?
 .br
-         /* size in kilo (KiB), mega (default, MiB), giga (GiB), tera (TiB) or
+         /* size in kilo (KiB), mega (default, MiB), giga (GiB), tera (TiB),
 .br
-          * petabytes (PiB) or %, possibly given as a range; physical
+          * petabytes (PiB) or percentage of disk size or RAM size, possibly
 .br
-          * partitions or lvm logical volumes only; in future releases KB, MB,
+          * given as a range; physical partitions or lvm logical volumes only;
 .br
-          * GB, ... will be treated as 1000 instead of 1024 (KiB, MiB, GiB, ...)
+          * in future releases KB, MB, GB, ... will be treated as 1000 instead
 .br
-          * multipliers */
+          * of 1024 (KiB, MiB, GiB, ...) multipliers */
 .br
-         | -[[:digit:]]+[kKMGTP%iB]*(:resize)?
+         | -(RAM:[[:digit:]]+%|[[:digit:]]+[kKMGTP%iB]*)(:resize)?
 .br
          /* size in kilo, mega (default), giga, tera or petabytes or %,
 .br
