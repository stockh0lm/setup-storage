#! /usr/bin/perl -w

#use Data::Dumper;

# create Debian changelog from svn log -v -rX:Y output
# Thomas Lange, lange@informatik.uni-koeln.de
# 11/2010

#    This program is free software; you can redistribute it and/or modify it
#    under the same terms as Perl itself.

# subroutine _do_log_commandline stolen from SVN::Log, http://search.cpan.org/~nikc/SVN-Log-0.03/lib/SVN/Log.pm
# modified to get information we need

# ==================================================

use strict;

### sub _do_log_commandline {

my $state = 'start';

my $seprule  = qr/^-{72}$/;
my $headrule = qr/r(\d+) \| ([\w\-]+) \| (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/;

my @files = ();
my $rev;
my $author;
my $date;
my $msg;
my %all = ();

while (<>) {
  if ($state eq 'start' or $state eq 'message' and m/$seprule/) {
    if ($state eq 'start') {
      $state = 'head';
    } elsif ($state eq 'message') {
      $state = 'head';

      # remove first path component from files
      foreach (@files) { s#^/trunk/([^/]+/)?##}
      my $fi = join ",",@files;
      my @msgarr = (split /\n/,$msg);
      $msg = $msgarr[0]; # only first line of commit message
      foreach (grep /^Thanks:/, @msgarr) {
        s/^Thanks:\s*//;
        $msg .= ". Thanks $_";
      }
      foreach (grep /^Closes:/, @msgarr) {
        s/^Closes:\s*#?(\d+)/$1/;
        $msg .= ". Closes: #$_";
      }
      # strip off possibly duplicate file prefix (good developers have added it
      # before already :-) )
      $msg =~ s#^$fi: ##;
      push @{$all{$author}},"$fi: $msg [r$rev]\n";
    }
  } elsif ($state eq 'head' and m/$headrule/) {
    $rev = $1;
    $author = $2;
    $date = $3;
    @files=();
    $msg = "";

    $state = 'paths';
  } elsif ($state eq 'paths' and m/^$/) {
    $state = 'message';
  } elsif ($state eq 'paths' and m/^\s+(\w+) (.+)$/) {
    my $action = $1;
    my $str    = $2;

    # If a copyfrom_{path,rev} is listed then include it,
    # otherwise just note the path and the action.
    if($str =~ /^(.*?) \(from (.*?):(\d+)\)$/) {
      push @files,$1;
      ## $paths->{$1}{action} = $action;
      ## $paths->{$1}{copyfrom_path} = $2;
      ## $paths->{$1}{copyfrom_rev} = $3;
    } else {
      push @files,$str;
      ## $paths->{$str}{action} = $action;
    }
  } elsif ($state eq 'message') {
    $msg .= $_;
  }
}
### } # end _do_log_commandline

my %author_map = (
  jblache => "Julien BLACHE",
  lange => "Thomas Lange",
  "mgoetze-guest" => "Michael Goetze",
  mika => "Michael Prokop",
  mt => "Michael Tautschnig"
);

# print changelog entries
foreach (sort keys %all) {
  if (defined($author_map{$_})) {
    print "  [ " . $author_map{$_} . " ]\n";
  } else {
    print "  [ $_ ]\n"; #author
  }
  foreach (@{$all{$_}}) {
    print "  * $_";
  }
  print "\n\n";
}
