#! /bin/sh

# $Id$
#
# subroutine definitions for linux
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
disk_info() {

    # the variable holds a space separated list of devices and their block size
    device_size=`egrep ' cciss/c.d.\b| ida/c.d.\b| rd/c.d.\b| hd.\b| sd.\b|/disc\b' /proc/partitions | diskandsize`

    # a list of all local disks, without size
    disklist=`list_disks $device_size`
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
diskandsize() {

    local isdisk major minor blocks device suffix

    while read major minor blocks device suffix; do
	isdisk=1
	# skip ide cdrom
	[ -f /proc/ide/$device/media ] && grep -q cdrom /proc/ide/$device/media && isdisk=0
	[ $isdisk -eq 1 ] && echo "$device $blocks"
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
jobsrunning() {

    # test if jobs are running
    ps r | egrep -qv "ps r|TIME COMMAND"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
eval_cmdline() {

    # parse kernel parameters and define variables
    local word

    echo -n "Kernel parameters:"; cat /proc/cmdline
    for word in `cat /proc/cmdline` ; do
	case $word in
	    [a-zA-Z]*=*)
		echo "Defining variable: $word"
		eval $word
		;;
	esac
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_confdir() {

    local dnshost bootlog
    eval_cmdline

    bootlog=$LOGDIR/boot.log
    get-boot-info
    [ -n "$verbose" -a -f $bootlog ] && echo "Reading $bootlog"
    eval `grep -v "^#" $bootlog`

    # define flags to see if syslogd should be started
    # this routine is called again, so you can use a hook to redefine flags
    echo 6 > /proc/sys/kernel/printk
    define_fai_flags
    [ "$syslogd" ] && {
      klogd -c7 -f $LOGDIR/kernel.log
      syslogd -m 0 -p /tmp/etc/syslogsocket
    }

    echo "SERVER=$SERVER" >> $rcsfaivar
    create_resolv_conf
    get_fai_dir
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_partition() {

    echo "Partitioning local harddisks"
    [ ! -s $diskvar ] && setup_harddisks -d -X > $LOGDIR/format.log 2>&1
    # setup_harddisks must create $diskvar file
    if [ ! -s $diskvar ]; then
	cat $LOGDIR/format.log
	die "setup_harddisks did not create $diskvar file."
    fi
    # now define variable for root and boot partition and boot device
    . $diskvar
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_extrbase() {

    # extract the tar file which was the result of debootstrap
    echo "Unpacking Debian base archive"
    gzip -dc /var/tmp/base.tgz | tar -C $FAI_ROOT -xpf -
    # now we can copy fstab
    [ -f $FAI_ROOT/etc/$fstab ] && mv $FAI_ROOT/etc/$fstab $FAI_ROOT/etc/$fstab.old
    cp -p $LOGDIR/$fstab $FAI_ROOT/etc/$fstab
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_mirror() {

    # mount debian mirror directory
    [ "$FAI_DEBMIRROR" ] || return   # nothing to do
    mkdir -p $FAI_ROOT/$MNTPOINT
    mount $romountopt $FAI_DEBMIRROR $FAI_ROOT/$MNTPOINT ||
      die "Can't mount $FAI_DEBMIRROR"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_updatebase() {

    # maybe the base system is not up to date
    echo "Updating base"
    # try to mount the config space, since it can also contain Debian Packages
    # in /fai/files/packages 
    mount --bind $FAI $FAI_ROOT/fai
    if [ "$debug" ]; then
	prepare_apt | tee -a $LOGDIR/updatebase.log 2>&1
    else
	prepare_apt  > $LOGDIR/updatebase.log 2>&1
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_instsoft() {

    echo "Installing software may take a while"
    if [ "$debug" ]; then
	install_packages | tee -a $LOGDIR/software.log
    elif [ "$verbose" ]; then
	yes '' | install_packages 2>&1 | tee -a $LOGDIR/software.log
    else
	yes '' | install_packages >> $LOGDIR/software.log 2>&1
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_finish() {

    # umount swap space
    local sd
    for sd in $SWAPLIST; do
       swapoff $sd && [ "$verbose" ] && echo "Disable swap device $sd"
    done
    umount -n $FAI_ROOT/proc
    # undo fake of all programs made by fai
    fai-divert -R
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_chboot() {

    # change boot device (local disk or network)
    [ "$LOGUSER" -a "$TFTPLINK" ] &&
	$FAI_REMOTESH -l $LOGUSER ${SERVER} \
	    "cd /boot/fai; rm -f $HOSTNAME; ln -s $TFTPLINK $HOSTNAME"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
