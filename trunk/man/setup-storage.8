.TH setup-storage 8 "June 29, 2010" "Debian/GNU Linux"
.SH NAME
\fBsetup-storage\fP
\- automatically prepare storage devices
.SH SYNOPSIS
.br
\fBsetup-storage\fP
[\fB\-X\fP]
[\fB\-f\fP \fIfilename\fP]
[\fB\-d\fP]
[\fB\-h\fP]
.SH DESCRIPTION
Using FAI disk_config files,
\fBsetup-storage\fP
computes effective partition and volume sizes and executes the necessary
commands to configure storage devices. It manages disk drives as well as RAID
and LVM volumes. It handles all file systems supported by
\fBparted\fP(8)
as well as ntfs but is flexible enough to be extended to further types as well.
Once the storage devices are prepared, an appropriate
\fBfstab\fP(5)
file is generated.

Without the
\fB\-X\fP
parameter
\fBsetup-storage\fP
runs in test-only mode and does not execute commands other than writing disk
labels to a blank disk.

The exit code of
\fBsetup-storage\fP
is 0 if all operations were performed successfully and non-zero if an error
occurs.
.SH OPTIONS

.TP
\fB\-X\fP
Really write the configuration to disk. Otherwise
\fBsetup-storage\fP
runs in test-only mode.

.TP
\fB\-f\fP \fIfilename\fP
Normally
\fBsetup-storage\fP
selects an appropriate configuration from
$FAI/disk_config/
by picking the first class from
.IR classes
that has an existing file.
If however
\fB\-f\fP
is given the configuration in
\fIfilename\fP
is used.

.TP
\fB\-d\fP
Enable debugging output.

.TP
\fB\-h\fP
Display the synopsis and version info and exit.
.SH ENVIRONMENT
\fBsetup-storage\fP
will use the following environment variables:
.TP
.B disklist
The
.IR disklist
variable must contain a newline separated list of disk drives available in the
system. Their order matters as they may be referred to as disk1, etc. in
disk_config.
.TP
.B debug
If
.IR debug
is set to a non-zero value all actions and details to track the operation of
\fBsetup-storage\fP
are printed to stderr.
.TP
.B FAI
The location of the config space to find the disk_config directory.
.TP
.B classes
The list of FAI classes to determine the appropriate configuration to choose.
.TP
.B LOGDIR
\fBsetup-storage\fP
generates disk_var.sh and fstab (see below) in this directory.
.TP
.B flag_initial
This variable determines if partitions should be preserved when they
are tagged as to be preserved. Normally set by the list of FAI flags
(FAI_FLAGS).
.SH FILES
If
\fBsetup-storage\fP
executes successfully, an
\fBfstab\fP(5)
file matching the specified configuration is generated as
$LOGDIR/fstab. Furthermore the file $LOGDIR/disk_var.sh
is generated. This file defines the following variables, if not yet set:
.IR SWAPLIST ,
.IR ROOT_PARTITION ,
.IR BOOT_PARTITION
(which is only set in case this resides on a disk drive), and
.IR BOOT_DEVICE .
The latter two describe the partition and disk/RAID/LVM device hosting the mount
point for /boot. If /boot has no extra mount point, / is used instead.
You may source $LOGDIR/disk_var.sh to get the variables set.
.SH SYNTAX
This section describes the syntax of disk_config files


file ::= <lines> EOF
.br


lines ::= EOL 
.br
          /* empty lines or whitespace only */
.br
          | <comment> EOL 
.br
          | <config> EOL 
.br


comment ::= #.* 
.br


config ::= disk_config lvm( <lvmoption>)* 
.br
           | disk_config raid( <raidoption>)*
.br
           | disk_config cryptsetup( <cryptsetupoption>)*
.br
           | disk_config tmpfs
.br
           | disk_config end 
.br
           | disk_config disk[[:digit:]]+( <option>)*
.br
           | disk_config [^[:space:]]+( <option>)*
.br
           /* fully qualified device-path or short form, like hda, whereby full
.br
            * path is assumed to be /dev/hda; may contain shell globbing such
.br
            * as /dev/disk/by-id/scsi-* */
.br
           | <volume>
.br


lvmoption ::= /* empty */
.br
           | preserve_always:[^/,\\s\\-]+-[^/,\\s\\-]+(,[^/,\\s\\-]+-[^/,\\s\\-]+)*
.br
           /* preserve volumes -- always */
.br
           | preserve_reinstall:[^/,\\s\\-]+-[^/,\\s\\-]+(,[^/,\\s\\-]+-[^/,\\s\\-]+)*
.br
           /* preserve volumes -- unless the system is installed for the
.br
           first time */
.br
           | preserve_lazy:[^/,\\s\\-]+-[^/,\\s\\-]+(,[^/,\\s\\-]+-[^/,\\s\\-]+)*
.br
           /* preserve volumes -- unless these don't exist yet */
.br
           | always_format:[^/,\\s\\-]+-[^/,\\s\\-]+(,[^/,\\s\\-]+-[^/,\\s\\-]+)*
.br
           /* run mkfs on the volumes, even if marked as preserve */
.br
           | resize:[^/,\\s\\-]+-[^/,\\s\\-]+(,[^/,\\s\\-]+-[^/,\\s\\-]+)*
.br
           /* attempt to resize partitions */
.br
           | fstabkey:(device|label|uuid)
.br
           /* when creating the fstab, the key used for defining the device
.br
           may be the device (/dev/xxx), a label given using \-L, or the uuid
.br
           */  
.br


raidoption ::= /* empty */
.br
           | preserve_always:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* preserve volumes -- always */
.br
           | preserve_reinstall:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* preserve volumes -- unless the system is installed for the
.br
           first time */
.br
           | preserve_lazy:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* preserve volumes -- unless these don't exist yet */
.br
           | always_format:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* run mkfs on the volumes, even if marked as preserve */
.br
           | fstabkey:(device|label|uuid)
.br
           /* when creating the fstab the key used for defining the device
.br
           may be the device (/dev/xxx), a label given using \-L, or the uuid
.br
           */  
.br


cryptsetupoption ::= /* empty */
.br
           | randinit
.br
           /* initialise all encrypted partitions with random data */
.br


option ::= /* empty */
.br
           | preserve_always:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* preserve partitions -- always */
.br
           | preserve_reinstall:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* preserve partitions -- unless the system is installed for the 
.br
           first time */
.br
           | preserve_lazy:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* preserve partitions -- unless these don't exist yet */
.br
           | always_format:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* run mkfs on the partitions, even if marked as preserve */
.br
           | resize:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* attempt to resize partitions */
.br
           | disklabel:(msdos|gpt|gpt-bios)
.br
           /* write a disklabel - default is msdos */
.br
           | bootable:[[:digit:]]+
.br
           /* mark a partition bootable, default is / */
.br
           | virtual
.br
           /* do not assume the disk to be a physical device, use with xen */
.br
           | fstabkey:(device|label|uuid)
.br
           /* when creating the fstab the key used for defining the device
.br
           may be the device (/dev/xxx), a label given using \-L, or the uuid
.br
           */
.br
           | sameas:(disk[[:digit:]]+|[^[:space:]]+)
.br
           /* Indicate that this disk will use the same scheme
.br
           as the given device. The referenced device must be
.br
           defined before the device using this option. Use only
.br
           with identical hardware.
.br
           */
.br


volume ::= <type> <mountpoint> <size> <filesystem> <mount_options> <fs_options>
.br
           | vg <name> <size> <fs_options>
.br
           /* lvm vg */
.br
           | tmpfs <mountpoint> <tmpfs_size> <mount_options>
.br
           /* tmpfs volume */
.br


type ::= primary
.br
         /* for physical disks only */
.br
         | logical
.br
         /* for physical disks only */
.br
         | raw-disk
.br
         /* for physical disks only: do not partition this disk, use it as-is */
.br
         | raid[0156]
.br
         /* raid level */
.br
         | luks
.br
         /* encrypted partition using LUKS */
.br
         | tmp
.br
         /* encrypted partition for /tmp usage, will be
.br
            recreated with a random key at each boot and
.br
            reformatted as ext2 */
.br
         | swap
.br
         /* encrypted partition for swap space usage, will
.br
            be recreated with a random key at each boot and
.br
            reformatted as swap space */
.br
         | [^/[:space:]]+-[^/[:space:]]+
.br
         /* lvm logical volume: vg name and lv name*/
.br


mountpoint ::= (-|swap|/[^\:[:space:]]*)
.br
               /* do not mount, mount as swap, or mount at fully qualified path */
.br


name ::= [^/[:space:]]+
.br
         /* lvm volume group name */
.br


sizespec ::= RAM:[[:digit:]]+%|[[:digit:]]+[kKMGTP%iB]*
.br
         /* size in kilo (KiB), mega (default, MiB), giga (GiB), tera (TiB),
.br
          * petabytes (PiB) or percentage of disk size or RAM size;
.br          
          * in future releases KB, MB, GB, ... will be treated as 1000 instead
.br
          * of 1024 (KiB, MiB, GiB, ...) multipliers */


size ::= <sizespec>(-(<sizespec>)?)?(:resize)?
.br
         /* size, possibly given as a range; physical partitions or lvm logical
.br
          * volumes only */
.br
         | -<sizespec>(:resize)?
.br
         /* size given as upper limit; physical partitions or lvm logical
.br
          * volumes only */
.br
         | [^,:[:space:]]+(:(spare|missing))*(,[^,:[:space:]]+(:(spare|missing))*)*
.br
         /* devices and options for a raid or lvm vg */
.br


tmpfs_size ::= <sizespec>
.br
         /* tmpfs size */
.br


mount_options ::= [^[:space:]]+
.br


filesystem ::= -
.br
               | swap
.br
               | [^[:space:]]
.br
               /* mkfs.xxx must exist */
.br


fs_options ::= (createopts=".*"|tuneopts=".*"|(pv|vg|lv|md)createopts=".*")*
.br
               /* options to append to mkfs.xxx and to the filesystem-specific
.br
                * tuning tool, pvcreate, vgcreate, lvcreate or mdadm */
.br
.SH MIGRATION FROM SETUP_HARDDISKS
The major differences to the prior configuration syntax are:
.IP \(bu
The disk_config ... line allows for the keywords lvm and raid
.IP \(bu
Options may need to be appended to the disk_config line
.IP \(bu
The ";" is not used anymore, the options that were given there have now been split up
.IP \(bu
The filesystem is now an explicit parameter; note that the order of
filesystem/mount-options is the same /etc/fstab as opposed to the previous
format of disk_config.
.IP \(bu
Any options to mkfs.xxx may be given using createopts="".
.IP \(bu
The "preserveX" and "boot" options are one of the options now given on the
disk_config line, using preserve_reinstall, preserve_always, or preserve_lazy,
and bootable.  preserve_always is equivalent to the previous preserveX option,
whereas preserve_reinstall preserves the partition unless "initial" is given as
one of the FAI_FLAGS. preserve_lazy allows to preserve partitions only if these
exist already. Otherwise they are created.
.IP \(bu
The "always_format" option overrides preserving filesystems (via one of the
"preserveX" options), like the "format" option in setup_harddisks.
.IP \(bu
Support for LVM and RAID is completely new
.IP \(bu
Resizing partitions and filesystems is supported
.SH EXAMPLES
Simple configuration of /dev/hda
.sp
.nf
.ta 10n 20n 30n 40n 50n
disk_config hda preserve_always:6,7 disklabel:msdos bootable:3

primary	/boot	20-100	ext3	rw
primary	swap	1000	swap	sw
primary	/	12000	ext3	rw	createopts="\-b 2048"
logical	/tmp	1000	ext3	rw,nosuid
logical	/usr	5000	ext3	rw
logical	/var	10%-	ext3	rw
logical	/nobackup	0-	xfs	rw
.sp
.fi
.PP
.IP \(bu
Preserve the 6th and the 7th partition. The disklabel is msdos which is the default
for x86. Furthermore the 3rd partition is made bootable.
.IP \(bu
Create a primary partition /dev/hda1 with a size between 20 and 100 MiB and mount it
read-write as /boot; it is formatted using ext3 filesystem.
.IP \(bu
/dev/hda2 will be a swap space of 1000 MiB
.IP \(bu
/dev/hda3 should be formatted using ext3 filesystem; when calling mkfs.ext3
the option "\-b 2048" is appended.
.IP \(bu
Create the logical partition /dev/hda5
.IP \(bu
Make /dev/hda7 at least 10% of the disk size
.IP \(bu
Use mkfs.xfs to format the partition 8

.TP
Create a softRAID
.sp
.nf
.ta 6n 9n 43n 48n
disk_config raid
raid1	/	sda1,sdd1	ext2	rw,errors=remount-ro
raid0	-	disk2.2,sdc1,sde1:spare:missing	ext2	default
.sp
.fi
.PP
.IP \(bu
Create a RAID-1 on /dev/sda1 and /dev/sdd1, format using mkfs.ext2 and mount
it as /
.IP \(bu
Create a RAID-0 on the second partition of the second disk, /dev/sdc1, and
/dev/sde1 as a spare partition. The latter may be missing.

.TP
Simple LVM example
.sp
.nf
.ta 15n 22n 30n 40n
disk_config sda bootable:1
primary	/boot	500	ext3	rw
primary	-	4096-	-	-

disk_config lvm
vg	my_pv	sda2
my_pv-_swap	swap	2048	swap	sw
my_pv-_root	/	2048	ext3	rw
.sp
.fi
.PP

.TP
Crypt example
.sp
.nf
.ta 10n 20n 30n 40n 50n
disk_config /dev/sdb
primary	/	21750	ext3	defaults,errors=remount-ro
primary	/boot	250	ext3	defaults
logical	-	4000	-	-
logical	-	2000	-	-
logical	-	10-	-	-

disk_config cryptsetup
swap	swap	/dev/sdb5	swap	defaults
tmp	/tmp	/dev/sdb6	ext2	defaults
luks	/local00	/dev/sdb7	ext3	defaults,errors=remount-ro  createopts="\-m	0"
.sp
.fi
.PP

.TP
tmpfs example
.sp
.nf
.ta 10n 20n 30n 40n 50n
disk_config tmpfs
tmpfs	/tmp	RAM:20%	defaults
tmpfs	/scratch	3GiB	defaults
.sp
.fi
.PP
.IP \(bu
Mount a tmpfs on /tmp with a maximum size equal to 20% of the total amount of
RAM in the machine. This is equivalent to using size=20% in the tmpfs mount
options.
.IP \(bu
Mount a tmpfs on /scratch with a maximum size of 3 GiB.

.TP
External log device example
.sp
.nf
.ta 10n 20n 30n 40n 60n
disk_config /dev/sda fstabkey:uuid bootable:2
primary	/	20GiB	ext3		defaults
primary	/boot	250	ext2		defaults
primary	swap	4GiB	swap		defaults
logical	-	256	ext3_journal	-
logical	-	256	ext4_journal	-
logical	-	256	xfs_journal	-

disk_config /dev/sdb fstabkey:uuid
primary	/mnt/ext3	33%	ext3:journal=/dev/sda5		defaults
primary	/mnt/ext4	33%	ext4:journal=/dev/sda6		defaults
primary	/mnt/xfs	33%	xfs:journal=/dev/sda7		defaults
.sp
.fi
.PP
.IP \(bu
Mount an ext3 filesystem on /dev/sdb1 with an external journal on /dev/sda5
.IP \(bu
Mount an ext4 filesystem on /dev/sdb2 with an external journal on /dev/sda6
.IP \(bu
Mount an XFS filesystem on /dev/sdb3 using /dev/sda7 as the log device

.SH CAVEATS
.IP \(bu
Partition UUID cannot be obtained: In case a partition was previously used as
part of a software RAID volume and now is intended as swap space, udev fails
when asked for a UUID. This happens because mkswap does not overwrite the
previous RAID superblock. You can remove it using mdadm \-\-zero-superblock
<device>.
.IP \(bu
Machine does not boot because not partition is marked as bootable: If the
bootable option is not specified, not partition will be marked as such. Modern
BIOSes don't seem to require such markers anymore, but for some systems it may
still be necessary. Previous versions of setup-storage by default marked the
partition mounting / as bootable, but this is not a sane default for all cases.
If you want to be sure not boot failures happen because of a missing bootable
marker, explicitly set the bootable option. Of course, there are lots of other
reasons why a system may fail to boot.
.IP \(bu
Crypto support requires some site-specific changes: If you use cryptsetup
stanza, a crypttab file and key files for all luks volumes will be created. The
key files are left in /tmp/fai; you will want to copy these to some removable
media.
.SH SEE ALSO
This program is part of FAI (Fully Automatic Installation).
The FAI homepage is http://fai-project.org.

Further documentation, including coding related information, is maintained
in a wiki page at http://wiki.fai-project.org/index.php/Setup-storage.
.SH AUTHOR
The
\fBsetup-storage\fP
program was written by Michael Tautschnig <mt@debian.org>, with
contributions from Christian Kern, Julien Blache <jblache@debian.org>
and others.

The original and primary author of FAI is Thomas Lange
<lange@informatik.uni-koeln.de>.
