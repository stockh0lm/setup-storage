.TH setup-storage 8 "September 16, 2008" "Debian/GNU Linux"
.SH NAME
\fBsetup-storage\fP
\- automatically prepare storage devices
.SH SYNOPSIS
.br
\fBsetup-storage\fP
[\fB\-X\fP]
[\fB\-f\fP \fIfilename\fP]
[\fB\-d\fP]
[\fB\-h\fP]
.SH DESCRIPTION
Using FAI disk_config files,
\fBsetup-storage\fP
computes effective partition and volume sizes and executes the necessary
commands to configure storage devices. It manages disk drives as well as RAID
and LVM volumes. It handles all file systems supported by
\fBparted\fP(8)
as well as ntfs but is flexible enough to be extended to further types as well.
Once the storage devices are prepared, an appropriate
\fBfstab\fP(5)
file is generated.

Without the
\fB\-X\fP
parameter
\fBsetup-storage\fP
runs in test-only mode and does not execute commands other than writing disk
labels to a blank disk.

The exit code of
\fBsetup-storage\fP
is 0 if all operations were performed successfully and non-zero if an error
occurs.
.SH USAGE
To enable the use of the new partioning tool setup-storage you have to
set
.IR USE_SETUP_STORAGE =1 
in the according class file in configspace (like
/srv/fai/config/class/FAIBASE.var for example).
.SH OPTIONS

.TP
\fB\-X\fP
Really write the configuration to disk. Otherwise
\fBsetup-storage\fP
runs in test-only mode.

.TP
\fB\-f\fP \fIfilename\fP
Normally
\fBsetup-storage\fP
selects an appropriate configuration from
$FAI/disk_config/
by picking the first class from
.IR classes
that has an existing file.
If however
\fB\-f\fP
is given the configuration in
\fIfilename\fP
is used.

.TP
\fB\-d\fP
Enable debugging output.

.TP
\fB\-h\fP
Display the synopsis and version info and exit.
.SH ENVIRONMENT
\fBsetup-storage\fP
will use the following environment variables:
.TP
.B disklist
The
.IR disklist
variable must contain a newline separated list of disk drives available in the
system. Their order matters as they may be referred to as disk1, etc. in
disk_config.
.TP
.B debug
If
.IR debug
is set to a non-zero value all actions and details to track the operation of
\fBsetup-storage\fP
are printed to stderr.
.TP
.B FAI
The location of the config space to find the disk_config directory.
.TP
.B classes
The list of FAI classes to determine the appropriate configuration to choose.
.TP
.B LOGDIR
\fBsetup-storage\fP
generates disk_var.sh and fstab (see below) in this directory.
.SH FILES
If
\fBsetup-storage\fP
executes successfully an
\fBfstab\fP(5)
file matching the specified configuration is generated as
$LOGDIR/fstab. Further $LOGDIR/disk_var.sh
is generated and may be sourced to get the variables
.IR SWAPLIST ,
.IR ROOT_PARTITION ,
.IR BOOT_PARTITION
and
.IR BOOT_DEVICE .
The latter two will only be set in case they
reside on a disk drive.
.SH SYNTAX
This section describes the syntax of disk_config files


file ::= <lines> EOF
.br


lines ::= EOL 
.br
          /* empty lines or whitespace only */
.br
          | <comment> EOL 
.br
          | <config> EOL 
.br


comment ::= #.* 
.br


config ::= disk_config lvm( <lvmoption>)* 
.br
           | disk_config raid( <raidoption>)*
.br
           | disk_config end 
.br
           | disk_config disk[[:digit:]]+( <option>)*
.br
           | disk_config [^[:space:]]+( <option>)*
.br
           /* fully qualified device-path or short form, like hda, whereby full
.br
            * path is assumed to be /dev/hda; may contain shell globbing such
.br
            * as /dev/disk/by-id/scsi-* */
.br
           | <volume>
.br


lvmoption ::= /* empty */
.br
           | preserve_always:[^/,\\s\\-]+-[^/,\\s\\-]+(,[^/,\\s\\-]+-[^/,\\s\\-]+)*
.br
           /* preserve partitions -- always */
.br
           | preserve_reinstall:[^/,\\s\\-]+-[^/,\\s\\-]+(,[^/,\\s\\-]+-[^/,\\s\\-]+)*
.br
           /* preserve partitions -- unless the system is installed for the 
.br
           first time */
.br
           | resize:[^/,\\s\\-]+-[^/,\\s\\-]+(,[^/,\\s\\-]+-[^/,\\s\\-]+)*
.br
           /* attempt to resize partitions */
.br
           | fstabkey:(device|label|uuid)
.br
           /* when creating the fstab, the key used for defining the device
.br
           may be the device (/dev/xxx), a label given using -L, or the uuid
.br
           */  
.br


raidoption ::= /* empty */
.br
           | preserve_always:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* preserve partitions -- always */
.br
           | preserve_reinstall:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* preserve partitions -- unless the system is installed for the 
.br
           first time */
.br
           | fstabkey:(device|label|uuid)
.br
           /* when creating the fstab the key used for defining the device
.br
           may be the device (/dev/xxx), a label given using -L, or the uuid
.br
           */  
.br


option ::= /* empty */
.br
           | preserve_always:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* preserve partitions -- always */
.br
           | preserve_reinstall:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* preserve partitions -- unless the system is installed for the 
.br
           first time */
.br
           | resize:[[:digit:]]+(,[[:digit:]]+)*
.br
           /* attempt to resize partitions */
.br
           | disklabel:(msdos|gpt)
.br
           /* write a disklabel - default is msdos */
.br
           | bootable:[[:digit:]]+
.br
           /* mark a partition bootable, default is / */
.br
           | virtual
.br
           /* do not assume the disk to be a physical device, use with xen */
.br
           | fstabkey:(device|label|uuid)
.br
           /* when creating the fstab the key used for defining the device
.br
           may be the device (/dev/xxx), a label given using -L, or the uuid
.br
           */  
.br


volume ::= <type> <mountpoint> <size> <filesystem> <mount_options> <fs_options>
.br
           | vg <name> <size>
.br
           /* lvm vg */
.br


type ::= primary
.br
         /* for physical disks only */
.br
         | logical
.br
         /* for physical disks only */
.br
         | raid[0156]
.br
         /* raid level */
.br
         | [^/[:space:]]+-[^/[:space:]]+
.br
         /* lvm logical volume: vg name and lv name*/
.br


mountpoint ::= -
.br
               /* do not mount */
.br
               | swap
.br
               /* swap space */
.br
               | /[^[:space:]]*(:encrypt)?
.br
               /* fully qualified path; if :encrypt is given the partition
.br
                * will be encrypted, the key is generated automatically */
.br


name ::= [^/[:space:]]+
.br
         /* lvm volume group name */
.br


size ::= [[:digit:]]+[kMGTP%]?(-([[:digit:]]+[kMGTP%]?)?)?(:resize)?
.br
         /* size in kilo, mega (default), giga, tera or petabytes or %,
.br
          * possibly given as a range; physical
.br
          * partitions or lvm logical volumes only; */
.br
         | -[[:digit:]]+[kMGTP%]?(:resize)?
.br
         /* size in kilo, mega (default), giga, tera or petabytes or %,
.br
          * given as upper limit; physical partitions
.br
          * or lvm logical volumes only */
.br
         | [^,:[:space:]]+(:(spare|missing))*(,[^,:[:space:]]+(:(spare|missing))*)*
.br
         /* devices and options for a raid or lvm vg */
.br


mount_options ::= [^[:space:]]+
.br


filesystem ::= -
.br
               | swap
.br
               | [^[:space:]]
.br
               /* mkfs.xxx must exist */
.br


fs_options ::= (createopts=".*"|tuneopts=".*")*
.br
               /* options to append to mkfs.xxx and to the filesystem-specific
.br
                * tuning tool */
.br
.SH MIGRATION FROM SETUP_HARDDISKS
The major differences to the prior configuration syntax are:
.IP \(bu
The disk_config ... line allows for the keywords lvm and raid
.IP \(bu
Options may need to be appended to the disk_config line
.IP \(bu
The ";" is not used anymore, the options that were given there have now been split up
.IP \(bu
The filesystem is now an explicit parameter; note that the order of
filesystem/mount-options is the same /etc/fstab as opposed to the previous
format of disk_config.
.IP \(bu
Any options to mkfs.xxx may be given using createopts="".
.IP \(bu
The "preserveX" and "boot" options are one of the options now given on the
disk_config line, using preserve_reinstall or preserve_always and bootable.
preserve_always is equivalent to the previous preserveX option, whereas
preserve_reinstall preserves the partition unless "initial" is given as one of
the FAI_FLAGS.
.IP \(bu
Support for LVM and RAID is completely new
.IP \(bu
Resizing partitions and filesystems is supported
.SH EXAMPLES
Simple configuration of /dev/hda
.sp
.nf
.ta 10n 20n 30n 40n 50n
disk_config  hda	preserve_always:6,7	disklabel:msdos  bootable:3

primary	/boot	20-100	ext3	rw
primary	swap	1000	swap	sw
primary	/	12000	ext3	rw	createopts="-b 2048"
logical	/tmp	1000	ext3	rw,nosuid
logical	/usr	5000	ext3	rw
logical	/var	10%-	ext3	rw
logical	/nobackup	0-	xfs	rw
.sp
.fi
.PP
.IP \(bu
Preserve the 6th and the 7th partition. The disklabel is msdos which is the default
for x86. Furthermore the 3rd partition is made bootable.
.IP \(bu
Create a primary partition /dev/hda1 with a size between 20 and 100 MB and mount it
read-write as /boot; it is formatted using ext3 filesystem.
.IP \(bu
/dev/hda2 will be a swap space of 1000 MB
.IP \(bu
/dev/hda3 should be formatted using ext3 filesystem; when calling mkfs.ext3
the option "-b 2048" is appended.
.IP \(bu
Create the logical partition /dev/hda5
.IP \(bu
Make /dev/hda7 at least 10% of the disk size
.IP \(bu
Use mkfs.xfs to format the partition 8

.TP
Create a softRAID
.sp
.nf
.ta 6n 9n 40n 45n
disk_config raid
raid1	/	sda1,sdd1	ext2	rw,errors=remount-ro
raid0	-	disk2.2,sdc1,sde1:spare:missing	ext2  default
.sp
.fi
.PP
.IP \(bu
Create a RAID-1 on /dev/sda1 and /dev/sdd1, format using mkfs.ext2 and mount
it as /
.IP \(bu
Create a RAID-0 on the second partition of the second disk, /dev/sdc1, and
/dev/sde1 as a spare partition. The latter may be missing.

.TP
Simple LVM example
.sp
.nf
.ta 15n 22n 30n 40n
disk_config sda  bootable:1
primary	/boot	500	ext3	rw
primary	-	4096-	-	-
disk_config lvm
vg  my_pv  sda2
my_pv-_swap	swap	2048	swap	sw
my_pv-_root	/	2048	ext3	rw
.sp
.fi
.PP
.SH SEE ALSO
This program is part of FAI (Fully Automatic Installation).
The FAI homepage is http://www.informatik.uni-koeln.de/fai.

Further documentation, including coding related information, is maintained
in a wiki page at http://faiwiki.informatik.uni-koeln.de/index.php/Setup-storage.
.SH AUTHOR
FAI is courtesy of Thomas Lange <lange@informatik.uni-koeln.de>. Michael
Tautschnig <mt@debian.org> contributed the initial version of
\fBsetup-storage\fP
to replace the previous setup-harddisks, with the help of Christian Kern.
