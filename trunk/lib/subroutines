# $Id$
#*********************************************************************
#
# subroutines -- usefull subroutines for FAI
#
# This script is part of FAI (Fully Automatic Installation)
# (c) 2000,2001 by Thomas Lange, lange@informatik.uni-koeln.de
# Universitaet zu Koeln
#
#*********************************************************************
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# A copy of the GNU General Public License is available as
# `/usr/share/common-licences/GPL' in the Debian GNU/Linux distribution
# or on the World Wide Web at http://www.gnu.org/copyleft/gpl.html.  You
# can also obtain it by writing to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#*********************************************************************

# source this file, then you have these function available in the shell

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
disk_info() {

    # the variable holds a space separated list of devices and their block size
    device_size=`egrep ' cciss/c.d.$| ida/c.d.$| rd/c.d.$| hd.$| sd.$|/disc$' /proc/partitions | diskandsize`

    # a list of all local disks, without size
    disklist=`list_disks`
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ether_info() {

    ethers=`dmesg|grep "^eth.: "| awk -F: '{print $1}'|sort|uniq`
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
diskandsize() {

    local isdisk major minor blocks device

    while read major minor blocks device; do
	isdisk=1
	# skip ide cdrom; what about SCSI cdroms ?
	[ -f /proc/ide/$device/media ] && grep -q cdrom /proc/ide/$device/media && isdisk=0
	[ $isdisk -eq 1 ] && echo "$device $blocks"
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
list_disks() {

    # print only every second entry
    local i ent
    i=0

    for ent in $device_size; do
	if [ $i -eq 0 ]; then
	    echo $ent
	    i=1
	else
	    i=0
	fi
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
mount_local_disks() {
    # try to mount all partitions

    fstabcount=0
    local mountoption=ro
    [ "$1" = "rw" ] && mountoption=$1

    for disk in $disklist; do
	partitions=`LC_ALL=C fdisk -l /dev/$disk | \
	    egrep -v " Empty| Extended" | \
	    perl -ne 'print "$1\n" if m#^/dev/(\S+)\s#'`
	for partition in $partitions; do
	    mkdir -p $FAI_ROOT/$partition
	    mount -o $mountoption /dev/$partition $FAI_ROOT/$partition
	    # \ && echo $partition mounted successfully
	    if [ -f $FAI_ROOT/$partition/etc/fstab ]; then
		echo /etc/fstab found in $partition
		fstabpart=$partition
		fstablist="$fstablist $partition"
		fstabcount=$((fstabcount+1))
	    fi
	done
    done
    mount | grep $FAI_ROOT
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
umount_local_disks() {

    local part
    test -d $FAI_ROOT || return
    for part in `grep $FAI_ROOT /proc/mounts | cut -d ' ' -f 2| sort -r`; do
	umount $part
    done
    rmdir $FAI_ROOT/*
    umount $FAI_ROOT
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
rwmount() {

    # remount partition read/write
    mount -o rw,remount $1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fstab_mount() {

    if [ $fstabcount -eq 1 ]; then
	umount_local_disks
	mount -o ro /dev/$fstabpart $FAI_ROOT
	mount2dir $FAI_ROOT $FAI_ROOT/etc/fstab
	df
    fi
    [ $fstabcount -eq 0 ] && echo "No /etc/fstab found"
    [ $fstabcount -ge 2 ] && echo -n "Found multiple /etc/fstab files in : $fstablist.\nUse mount2dir for mounting."
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
save_log_local() {

    # save log files on local disk
    local logdir=/var/log/fai
    find /tmp -maxdepth 1 -size 0 | xargs -r rm
    mkdir -p $FAI_ROOT/$logdir/$HOSTNAME/$FAI_ACTION
    cp -p /tmp/* $FAI_ROOT/$logdir/$HOSTNAME/$FAI_ACTION 2> $devnull
    ln -s $HOSTNAME $FAI_ROOT/$logdir/localhost
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
save_log_remote() {

    # save log files to $SERVER
    [ "$LOGUSER" ] || return
    local logdir=$HOSTNAME/$FAI_ACTION
    find /tmp -maxdepth 1 -size 0 | xargs -r rm
    $FAI_REMOTESH -l $LOGUSER $SERVER "rm -f $logdir/* ; \
	test -d $logdir || mkdir -p $logdir" 2> $devnull
    $FAI_REMOTECP -p /tmp/* $LOGUSER@$SERVER:$logdir 2> $devnull
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
save_dmesg() {

    dmesg > /tmp/dmesg.log
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
die() {

    echo $*
    exec bash
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ifclass() {

# test, if a certain class is defined
    local cl
    for cl in $classes; do
	[ x$cl = x$1 ] && return 0
    done
    return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
call_hook() {

    local hook=$1
    local cl
    [ "$debug" ] && local dflag="-d"

    for cl in $classes; do
	local hfile=/fai/hooks/${hook}.$cl
	if [ -x $hfile ]; then
	   	echo "Call hook: $hook.$cl"
		# execute the hook
		$hfile $dflag
		# is that really good ? Makes sense, if hostname would
		# be the first hook
		# execute only one hook if return value is 42
		# [ $? -eq 42 ] && return
	fi
	if [ -x $hfile.sh ]; then
	   	echo "Source hook: $hook.$cl.sh"
		# source this hook
		. $hfile.sh $dflag
	fi
     done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
wait_for_jobs() {

    # wait for running jobs to finish (eg. update-auctex-elisp)
    local i=0
    while (ps r | egrep -qv "ps r|TIME COMMAND"); do
	[ $(($i % 10)) -eq 0 ] && echo "Waiting for background jobs to finish."
	i=$(($i+1))
	sleep 3
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
create_ramdisk() {

    local ramdevice=/dev/ram0
    mke2fs -q -m 0 $ramdevice && echo "ramdisk $ramdevice created"
    mount -n $ramdevice /tmp
    # now create the required subdirectories
    mkdir /tmp/var /tmp/etc /tmp/target
    cd    /tmp/var && mkdir tmp log lock run spool
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
mkdivert() {

    # make a diversion of a file
    $ROOTCMD dpkg-divert --quiet --package fai --add --rename $1
    cat > $FAI_ROOT/$1 <<-EOF
	#! /bin/sh
	# created by FAI
	exit 0
EOF
    chmod a+rx $FAI_ROOT/$1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
rmdivert() {

    # remove diversion
    rm -f $FAI_ROOT/$1
    $ROOTCMD dpkg-divert --quiet --package fai --remove --rename $1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
get_dhcp_info() {

    local dhcplog=/tmp/dhcp.log
    dhclient -lf /dev/null >$dhcplog 2>/tmp/dhclient.log
    [ -n "$verbose" -a -f $dhcplog ] && echo "Reading $dhcplog"
    eval `cat $dhcplog`
    killall dhclient-2.2.x
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
get_bootp_info() {

    local bootlog=/tmp/bootp.log
    # define all bootpc information as variables
    bootpc --timeoutwait $timeout --returniffail > $bootlog
    [ -n "$verbose" -a -f $bootlog ] && echo "Reading $bootlog"
    eval `cat $bootlog`
    FAI_LOCATION=$T170
    FAI_ACTION=$T171
    FAI_FLAGS=$T172
    #FAI_BACKUP_LIST=$T174 # not yet used
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
load_keymap_consolechars() {

    local mapname keymapfile keymaps
    # support for other keyboards
    if [ "$FAI_KEYMAP" ]; then
	for mapname in $FAI_KEYMAP; do
	    keymapfile=`find /usr/share/keymaps/ /fai/files \
	      ! -type d -name $mapname.kmap.gz -o \
	      -name $mapname.inc.gz -o -name $mapname`
	    [ "$keymapfile" ] && keymaps="$keymaps $keymapfile"
	done

	if [ "$keymaps" ]; then
	    loadkeys $keymaps
	else
	    echo "FAI_KEYMAP $FAI_KEYMAP not found"
	fi
    fi
    [ "$FAI_CONSOLEFONT" ] &&
	consolechars -v -f /usr/share/consolefonts/$FAI_CONSOLEFONT.psf.gz
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
eval_cmdline() {

    # parse kernel parameters and eval variables
    local word

    for word in `cat /proc/cmdline` ; do
	case $word in
	    [a-zA-Z]*=*)
		echo "Defining variable: $word"
		eval $word
		;;
	esac
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task() {

    local taskname=$1
    call_hook $taskname
    if [ -f /tmp/skip.$taskname ]; then
	rm /tmp/skip.$taskname
	[ "$verbose" ] && echo "Skiping task_$taskname"
    else
	echo "Calling task_$taskname"
	task_$taskname
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_defvar() {

    local class
    cd /fai/class
    for class in $classes ; do
	if [ -f $class.var ]; then
	    [ "$verbose" ] && echo "Executing $class.var"
	    [ "$debug" ] && set -vx
	    . $class.var </dev/null
	    [ "$debug" ] && set +vx
	fi
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_defclass() {

    local newclasses class f

    cd /fai/class || die "No directory /fai/class found. No configuration in $FAI_LOCATION on the install server."
    echo "Defining classes"

    [ -f $HOSTNAME ] && newclasses=`cat $HOSTNAME`
    classes="DEFAULT $newclasses"

    # alphabetical sort is important
    for f in `ls S[0-9]*.{sh,pl}` ; do
	if [ -x $f -a -f $f ]; then
	[ "$verbose" ] && echo "Executing $f"
	case $f in
	    *.pl) newclasses=`perl $f </dev/null` ;;
	    *.sh) newclasses=`sh $f </dev/null | grep -v '^#'` ;;
	esac
	[ "$debug" ] && echo "newclasses= $newclasses"
	classes="$classes $newclasses"
	fi
    done
    classes="$classes $HOSTNAME LAST"

    for class in $classes ; do
	echo $class >> /tmp/FAI_CLASSES
	revclasses="$class $revclasses"
    done

    # define classes as: a.b.c.d for cfengine -D
    # this doesn't work without echo
    cfclasses=`echo $classes`
    cfclasses=${cfclasses// /.}
    [ "$debug" ] && echo "cfclasses: $cfclasses"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_partition() {

    if [ ! -s /tmp/fstab ];then
	echo "Partitioning local harddisks"
	setup_harddisks -X > /tmp/format.log 2>&1
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_mountdisks() {

    mount2dir $FAI_ROOT /tmp/fstab
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_extrbase() {

    echo "Unpacking Debian base archive"
    zcat /var/tmp/base.tgz | tar -C $FAI_ROOT -xpf -
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_mirror() {

    # mount debian directory
    if [ "$FAI_DEBMIRROR" ]; then
	mkdir -p $FAI_ROOT/$MNTPOINT
	mount $romountopt $FAI_DEBMIRROR $FAI_ROOT/$MNTPOINT ||
	    die "Can't mount $FAI_DEBMIRROR"
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_instsoft() {

    if [ "$debug" ]; then
	install_packages | tee -a /tmp/software.log
    elif [ "$verbose" ]; then
	yes '' | install_packages | tee -a /tmp/software.log
    else
	yes '' | install_packages >> /tmp/software.log 2>&1
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
prepare_apt() {

    # ftp and http needs resolv.conf in chroot environment, /etc/hosts is useful
    cp /tmp/etc/resolv.conf /etc/hosts $FAI_ROOT/etc
    # set hostname in $FAI_ROOT
    echo -e "$IPADDR\t$HOSTNAME.$DOMAIN $HOSTNAME" >>$FAI_ROOT/etc/hosts
    cp /etc/apt/* $FAI_ROOT/etc/apt/
    # some packages must access /proc even in chroot environment
    mount -t proc proc $FAI_ROOT/proc

    $ROOTCMD apt-get update
    $ROOTCMD apt-get check
    [ $? -ne 0 ] && $ROOTCMD apt-get -f -y install </dev/null 
    $ROOTCMD dpkg -C
    [ $? -ne 0 ] && yes '' | $ROOTCMD dpkg --configure -a 
    $ROOTCMD apt-get -f -y remove pcmcia-cs
    $ROOTCMD apt-get -f -y upgrade </dev/null
    # update dpkg info which packages are available
    $ROOTCMD apt-cache dumpavail > /tmp/dumpavail
    $ROOTCMD dpkg --update-avail /tmp/dumpavail
    rm -f $FAI_ROOT/tmp/dumpavail

    # fake some programs
    mkdivert /usr/sbin/xserver-configure
    mkdivert /usr/bin/ypwhich
    mkdivert /sbin/start-stop-daemon
    cp /sbin/start-stop-daemon $FAI_ROOT/sbin/start-stop-daemon
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_updatebase() {

    echo "Updating base"
    if [ "$debug" ]; then
	prepare_apt | tee -a /tmp/updatebase.log 2>&1
    else
	prepare_apt  > /tmp/updatebase.log 2>&1
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_savelog() {

    save_log_local
    save_log_remote
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_chboot() {

    # change boot device (local disk or network)
    [ "$LOGUSER" -a "$TFTPLINK" ] &&
	$FAI_REMOTESH -l $LOGUSER ${SERVER} \
	    "cd /boot/fai; rm -f $HOSTNAME; ln -s $TFTPLINK $HOSTNAME"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_sysinfo() {

    local disk
    # show some system information and save it on the server
    { 
    lspci
    ether_info
    echo "Ethernet cards found: $ethers"
    
    [ -f /proc/scsi/scsi ] && cat /proc/scsi/scsi
    cat /proc/partitions
    disk_info
    for disk in $disklist; do
	hdparm -iv /dev/$disk
	fdisk -s /dev/$disk
	LC_ALL=C file -s /dev/$disk?* | grep -v ": empty"
    done
    fdisk -lu
    echo -n "xserver for graphic card: "; xviddetect -q
    #si -p -o shm
    mount_local_disks
    fstab_mount

    task defclass
    task defvar

    echo The defined classes are:
    echo $classes
    echo The classes are also saved in /tmp/FAI_CLASSES

    load_keymap_consolechars
    } | tee -a $rcslog  2>&1

    save_dmesg
    save_log_remote
    task_faiend
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_backup() {

# FAI_BACKUP_LIST contains backup options
# proposed format: "hda1 hda3 hda12 sda2 '0 0 1 1'"
#                  list of devices  list of backup levels
# this subroutine is not yet tested, not yet used
# It's only an idea how a backup could be made
    die "make_backup routine not yet used. But you can use the hook backup."
    mount_local_disks
    for partition in $SAVE_DEVICES ; do
	# tar cf - $FAI_ROOT/$partition | $FAI_REMOTESH -l $LOGUSER $SERVER dd if= of=$partition.tar
	dump 0f $LOGUSER@$SERVER:backup/$HOSTNAME/$partition.dmp $FAI_ROOT/$partition
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_configure() {

# execute scripts; cfengine, shell, perl and expect scripts are known types
cd /fai/scripts

local class filetype shelldebug

for class in $classes ; do
if [ -x $class -a -f $class ]; then
    filetype=`file $class`

    shelldebug=
    case $filetype in
	*"Bourne shell script"*)
	    [ "$debug" ] && shelldebug="sh -x" ;;
	*"Bourne-Again shell script"*)
	    [ "$debug" ] && shelldebug="bash -x" ;;
    esac

    case $filetype in

	*"Bourne shell script"*|*"Bourne-Again shell script"*)
	    echo "Executing $shelldebug shell: $class"
	    echo "=====   shell: $class   =====" >> /tmp/shell.log 2>&1
	    $shelldebug ./$class >> /tmp/shell.log 2>&1
	;;

	*"cfengine script"*)
	    echo "Executing cfengine: $class"
	    echo "=====   cfengine: $class   =====" >> /tmp/cfengine.log 2>&1
	    ./$class --no-lock -v -f $class -D${cfclasses} >> /tmp/cfengine.log 2>&1
	;;

	*"perl script"*)
	    echo "Executing perl: $class"
	    echo "=====   perl: $class   =====" >> /tmp/perl.log 2>&1
	    ./$class >> /tmp/perl.log 2>&1
	;;

	*"expect script"*)
	    echo "Executing expect: $class"
	    echo "=====   expect: $class   =====" >> /tmp/expect.log 2>&1
	    ./$class >> /tmp/expect.log 2>&1
	;;

	*) echo "File $class has unsupported type $filetype." ;;
    esac
fi
done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_faiend() {

    echo "Press <RETURN> to reboot or ctrl-c to execute a shell"
    [ -z $reboot ] && read
    echo "Rebooting $HOSTNAME now"
    cd /
    sync
    umount -ar
    exec reboot -dfi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
task_action() {

    echo "FAI_ACTION: $FAI_ACTION"
    case $FAI_ACTION in

	install)
	    echo Performing FAI installation. All data may be overwritten !
	    fai_install
	    ;;
	sysinfo)
	    echo Showing system information.
	    task sysinfo
	    die Now you have a shell.
	    ;;
	backup)
	    echo Doing backup of multiple partitions.
	    task backup
	    ;;
	*)
	    if [ -f /fai/hooks/$FAI_ACTION ]; then
		echo "Calling user defined action: $FAI_ACTION"
		/fai/hooks/$FAI_ACTION
	    else
		echo "ERROR: User defined action /fai/hooks/$FAI_ACTION not found."
		task_faiend
	    fi
	    ;;
	esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
