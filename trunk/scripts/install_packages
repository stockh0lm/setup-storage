#!/usr/bin/perl

# $Id$
#*********************************************************************
#
# install_packages -- read package config and install packages via apt-get
#
# This script is part of FAI (Fully Automatic Installation)
# (c) 2000, Thomas Lange, Universitaet zu Koeln
#
#*********************************************************************
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING. If not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
# MA 02111-1307, USA.
#*********************************************************************

# copyright (c), 2000-2001, Thomas Lange, lange@informatik.uni-koeln.de
# PRELOAD feature from Thomas Gebhardt  <gebhardt@hrz.uni-marburg.de>

# TODO: PRELOADandREMOVE also removes files after installing all packages

$| = 1;
@aptcommands = qw/install remove dselect-upgrade/;
%options = (
		       install => '-y --fix-missing',
		       remove  => '-y --purge',
             "dselect-upgrade" => '-y',
);

# currently no test, always execute
$test = 0;

$verbose=$ENV{verbose};
$FAI_ROOT = $ENV{FAI_ROOT};
$classpath = "/fai/package_config";
$aptgetlog = ">> /tmp/apt-get.log 2>&1";
$aptgetlog = '' if $verbose;

@classes = grep { !/^#|^\s*$/} split(/[\s\n]+/,$ENV{classes});

# read all package config files
foreach (@classes) {
  my $filename = "$classpath/$_";
  &readconfig($filename) if -f $filename;
}

# get file, which must exist before installing packages
foreach $entry (@preloadlist) {
  my ($url, $directory) = @$entry;
  execute("wget -nv -P$FAI_ROOT/$directory $url");
}

# call apt-get for each command and the lsit of packages
foreach $type (@aptcommands) {
  if ($type eq "dselect-upgrade") {
    dselectupgrade();
    next;
  }

  my $packlist = join(' ',@{$list{$type}});

  if ($packlist) {
    execute("chroot $FAI_ROOT apt-get $options{$type} $type $packlist $aptgetlog");
  }
}

# check if all went right
execute("chroot $FAI_ROOT dpkg -C $aptgetlog");
# clean apt-get cache
execute("chroot $FAI_ROOT apt-get clean $aptgetlog");
# - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub readconfig {

  my $filename = shift;
  my ($package,$type);

  open (FILE,"$filename") || warn "ERROR $0: Can't read config file: $filename\n";
  print "$0: read config file $filename\n" if $verbose;

  while (<FILE>) {
    next if /^#/;    # skip comments
    s/#.*$//;        # delete comments
    next if /^\s*$/; # skip empty lines
    chomp;
    /^PRELOAD\s+([^\s]+)\s+([^\s]+)/ and push(@preloadlist, [$1, $2]),next;
    /^PACKAGES\s+([^\s]+)/ and $type = $1,next;
    warn "PACKAGES .. line missing in $filename\n",next unless $type;
    push @{$list{$type}}, split;
  }
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub execute {

  # execute a command or only print it
  my $command = shift;
  my $error;

  $verbose && print "$command\n";
  $test && return;

  $error = system "$command";
  warn "ERROR: $error $?\n" if $error;
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub dselectupgrade {

  my ($package,$action,$list);
  my $tempfile = "$FAI_ROOT/tmp/dselect.tmp";

  while (@{$list{$type}}) {
    $package = shift @{$list{$type}};
    $action = shift @{$list{$type}};
    $list .= "$package $action\n";
  }

  open TMP, "> $tempfile" || die " Can't write to $tempfile";
  print TMP $list;
  close TMP;

  execute("chroot $FAI_ROOT dpkg --set-selections < $tempfile");
  execute("chroot $FAI_ROOT apt-get $options{$type} dselect-upgrade");
  unlink $tempfile;
}
