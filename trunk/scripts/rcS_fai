#!/bin/bash
# $Id$
#*********************************************************************
#
# rcS_fai -- main installation script executed after booting
#
# This script is part of FAI (Fully Automatic Installation)
# (c) 1999-2001 by Thomas Lange, lange@informatik.uni-koeln.de
# Universitaet zu Koeln
#
#*********************************************************************
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
# 
# A copy of the GNU General Public License is available as
# `/usr/share/common-licences/GPL' in the Debian GNU/Linux distribution
# or on the World Wide Web at http://www.gnu.org/copyleft/gpl.html. You
# can also obtain it by writing to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#*********************************************************************

#set -xv # for full debugging

# some global variables
FAI_VERSION=FAIVERSIONSTRING
rcslog=/tmp/rcS.log
stamp=/tmp/FAI_INSTALLATION_IN_PROGRESS
logdir=/var/log/fai
romountopt="-o ro,rsize=8192"
classes="DEFAULT $HOSTNAME LAST"  # default before defining classes

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
define_variables() {

    # after all classes are defined, define variables
    # source files *.var , which can set variables
    local class

    call_hook defvar
    cd /fai/class
    for class in $classes ; do
	if [ -f $class.var ]; then
	    [ "$verbose" ] && echo "Executing $class.var"
	    [ "$debug" ] && set -vx
	    . $class.var </dev/null
	    [ "$debug" ] && set +vx
	fi
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
define_classes() {

    local newclasses class f

    classes=
    call_hook defclass

    cd /fai/class || die "No directory /fai/class found. No configuration in $FAI_LOCATION on the install server."
    echo "Now defining classes"

    [ -f $HOSTNAME ] && newclasses=`cat $HOSTNAME`
    classes="DEFAULT $newclasses"

    # alphabetical sort is important
    for f in `ls S[0-9]*.{sh,pl}` ; do
	if [ -x $f -a -f $f ]; then
	[ "$verbose" ] && echo "Executing $f"
	case $f in
	    *.pl) newclasses=`perl $f </dev/null` ;;
	    *.sh) newclasses=`sh $f </dev/null | grep -v '^#'` ;;
	esac
	[ "$debug" ] && echo "newclasses= $newclasses"
	classes="$classes $newclasses"
	fi
    done
    classes="$classes $HOSTNAME LAST"

    for class in $classes ; do
	echo $class >> /tmp/FAI_CLASSES
	revclasses="$class $revclasses"
    done

    # define classes as: a.b.c.d for cfengine -D
    # this doesn't work without echo
    cfclasses=`echo $classes`
    cfclasses=${cfclasses// /.}
    [ "$debug" ] && echo "cfclasses: $cfclasses"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fai_init() {

    set -a # now export all variables

    . /etc/fai.conf
    . /usr/share/fai/subroutines
    DEBIAN_FRONTEND=Noninteractive
    # location of master files for cfengine
    FAI_FILES=/fai/files
    # local disks are mounted on this directory
    FAI_ROOT=/tmp/target
    ROOTCMD="chroot $FAI_ROOT"
    diskvar=/tmp/disk_var.sh
    moduleslog=/tmp/modules.log

    # for cfengine
    chroot=/usr/sbin/chroot
    cf_prefix="cfengine:"
    files=$FAI_FILES
    target=$FAI_ROOT

    umask 022
    PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/sbin:/usr/local/bin:
    ifup lo
    [ -x /sbin/portmap ] && /sbin/portmap
    mount -n -t proc proc /proc
    mount -n -t devpts devpts /dev/pts
    mount -n -o remount,rw,rsize=8192 /dev/root /
    cat /proc/kmsg >/dev/tty4 &
    create_ramdisk
    trap 'echo "Now rebooting";faireboot' INT QUIT
    save_dmesg
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fai_setup() {

    cat <<-EOF

    -----------------------------------------------------
      $FAI_VERSION
      Fully Automatic Installation for Debian GNU/Linux

      Copyright (c) 1999-2001, Thomas Lange
              lange@informatik.uni-koeln.de
    -----------------------------------------------------

EOF

    call_hook first
    # TODO: only start on demand; use FAI_FLAGS for that
    syslogd -m 0 -p /tmp/etc/syslogsocket
    klogd -c1 -f /tmp/kernel.log

    dmesg | grep -q "Sending DHCP requests" && get_dhcp_info
    dmesg | grep -q "Sending BOOTP requests" && get_bootp_info

    # create a resolv.conf
    if [ "$DNSSRVS" ]; then
	[ "$DOMAIN" ] && echo "domain $DOMAIN" >/tmp/etc/resolv.conf
	for dnshost in $DNSSRVS ; do
	    echo "nameserver $dnshost" >>/tmp/etc/resolv.conf
	done
    fi

    [ "$TIMESRVS_1" ] && rdate $TIMESRVS_1
    [ "$NTPSRVS_1" ] && ntpdate -b -v $NTPSRVS

    echo -n "Kernel parameters:"; cat /proc/cmdline
    eval_cmdline

    [ "$FAI_LOCATION" ] || die "\$FAI_LOCATION not defined."
    mount $romountopt $FAI_LOCATION /fai &&
	    echo "/fai mounted from $FAI_LOCATION"

    call_hook setup
    DNSDOMAIN=$DOMAIN     # cfengine 1.5.3 can't use $DOMAIN

    for flag in $FAI_FLAGS; do
	eval "$flag=1"
	[ "$verbose" ] && echo "FAI_FLAGS: $flag=1"
    done
    unset flag

    devnull=/dev/null
    [ "$debug" ] && devnull=/dev/console

#    not yet used
#    if [ "$FAI_EXTRA_MOUNT" ]; then
#	mount $romountopt -n $FAI_EXTRA_MOUNT && echo "$FAI_EXTRA_MOUNT mounted"
#    fi

    [ "$createvt" ] && {
	# create two virtual terminals
	echo "Press ctrl-c to interrupt FAI and to get a shell"
	openvt -c2; openvt -c3
	trap 'echo "You can reboot with faireboot";bash' INT QUIT
    }

    [ "$sshd" -a -x /usr/sbin/sshd ] && /usr/sbin/sshd
    disk_info
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fai_sysinfo() {

    # show some system information and save it on the server
    ( # execute in a subshell to get all output
	lspci
	hdparm -iv /dev/hd[a-h]
	fdisk -s /dev/hd? /dev/sd?
	fdisk -lu
	[ -f /proc/scsi/scsi ] && cat /proc/scsi/scsi
	cat /proc/partitions
	LC_ALL=C file -s /dev/hd* /dev/sd* | egrep -v " can't read | empty$"
	echo -n "xserver for graphic card: "; xviddetect -q
	#si -p -o shm
	mount_local_disks
	fstab_mount
    ) > >( tee -a $rcslog )  2>&1
    define_classes
    define_variables
    load_keymap_consolechars
    save_dmesg
    save_log_remote
    fai_boot
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
make_backup() {

# FAI_BACKUP_LIST contains backup options
# proposed format: "hda1 hda3 hda12 sda2 '0 0 1 1'"
#                  list of devices  list of backup levels
# this subroutine is not yet tested, not yet used
# It's only an idea how a backup could be made
    die "make_backup routine not yet used. But you can use the hook backup."
    mount_local_disks
    for partition in $SAVE_DEVICES ; do
	# tar cf - $FAI_ROOT/$partition | $FAI_REMOTESH -l $LOGUSER $SERVER dd if= of=$partition.tar
	dump 0f $LOGUSER@$SERVER:backup/$HOSTNAME/$partition.dmp $FAI_ROOT/$partition
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fai_configure() {

# execute scripts; cfengine, shell, perl and expect scripts are known types
cd /fai/scripts

local class filetype shelldebug

for class in $classes ; do
if [ -x $class -a -f $class ]; then
    filetype=`file $class`

    shelldebug=
    case $filetype in
	*"Bourne shell script"*)
	    [ "$debug" ] && shelldebug="sh -x" ;;
	*"Bourne-Again shell script"*)
	    [ "$debug" ] && shelldebug="bash -x" ;;
    esac

    case $filetype in

	*"Bourne shell script"*|*"Bourne-Again shell script"*)
	    echo "Executing $shelldebug shell: $class"
	    echo "=====   shell: $class   =====" >> /tmp/shell.log 2>&1
	    $shelldebug ./$class >> /tmp/shell.log 2>&1
	;;

	*"cfengine script"*)
	    echo "Executing cfengine: $class"
	    echo "=====   cfengine: $class   =====" >> /tmp/cfengine.log 2>&1
	    ./$class --no-lock -v -f $class -D${cfclasses} >> /tmp/cfengine.log 2>&1
	;;

	*"perl script"*)
	    echo "Executing perl: $class"
	    echo "=====   perl: $class   =====" >> /tmp/perl.log 2>&1
	    ./$class >> /tmp/perl.log 2>&1
	;;

	*"expect script"*)
	    echo "Executing expect: $class"
	    echo "=====   expect: $class   =====" >> /tmp/expect.log 2>&1
	    ./$class >> /tmp/expect.log 2>&1
	;;

	*) echo "File $class has unsupported type $filetype." ;;
    esac
fi
done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
prepare_apt() {

    # ftp and http needs resolv.conf in chroot environment, /etc/hosts is useful
    cp /tmp/etc/resolv.conf /etc/hosts $FAI_ROOT/etc
    # set hostname in $FAI_ROOT
    echo -e "$IPADDR\t$HOSTNAME.$DOMAIN $HOSTNAME" >>$FAI_ROOT/etc/hosts
    cp /etc/apt/* $FAI_ROOT/etc/apt/
    # some packages must access /proc even in chroot environment
    mount -t proc proc $FAI_ROOT/proc

    $ROOTCMD apt-get update
    $ROOTCMD apt-get check
    [ $? -ne 0 ] && $ROOTCMD apt-get -f -y install </dev/null 
    $ROOTCMD dpkg -C
    [ $? -ne 0 ] && yes '' | $ROOTCMD dpkg --configure -a 
    $ROOTCMD apt-get -f -y remove pcmcia-cs
    $ROOTCMD apt-get -f -y upgrade </dev/null
    # update dpkg info which packages are available
    $ROOTCMD apt-cache dumpavail > $FAI_ROOT/tmp/dumpavail
    $ROOTCMD dpkg --update-avail /tmp/dumpavail
    rm -f $FAI_ROOT/tmp/dumpavail

    # fake some programs
    mkdivert /usr/sbin/xserver-configure
    mkdivert /usr/bin/ypwhich
    mkdivert /sbin/start-stop-daemon
    cp /sbin/start-stop-daemon $FAI_ROOT/sbin/start-stop-daemon
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fai_install() {

    > $stamp

    {
    define_classes
    define_variables 
    } > >( tee -a $rcslog )  2>&1
    save_dmesg
    ( # execute in a subshell to get all output

    load_keymap_consolechars

    call_hook partition
    if [ ! -s /tmp/fstab ];then
	echo "Partitioning local harddisks"
	setup_harddisks -X > /tmp/format.log 2>&1
    fi
    if [ ! -s $diskvar ]; then
	cat /tmp/format.log
	die "Error: $diskvar not found."
    fi
    . $diskvar
    [ ! -f /tmp/fstab ] && die "No /tmp/fstab created."
    call_hook mountdisks
    mount2dir $FAI_ROOT /tmp/fstab

    call_hook extrbase
    echo "Unpacking Debian base archive"
    zcat /var/tmp/base.tgz | tar -C $FAI_ROOT -xpf -
    call_hook mirror
    # now we can copy fstab
    [ -f $FAI_ROOT/etc/fstab ] && mv $FAI_ROOT/etc/fstab $FAI_ROOT/etc/fstab.old
    cp -p /tmp/fstab $FAI_ROOT/etc/fstab
    mount_debian_mirror

    call_hook updatebase
    echo "Installing software may take a while"
    if [ "$debug" ]; then
	prepare_apt | tee -a /tmp/prepare-apt.log 2>&1
    else
	prepare_apt  > /tmp/prepare-apt.log 2>&1
    fi

    call_hook instsoft
    if [ "$debug" ]; then
	install_packages | tee -a /tmp/software.log
    elif [ "$verbose" ]; then
	yes '' | install_packages | tee -a /tmp/software.log
    else
	yes '' | install_packages >> /tmp/software.log 2>&1
    fi

    call_hook configure
    fai_configure

    umount -n $FAI_ROOT/proc
    # undo fake of programs
    rmdivert /sbin/start-stop-daemon
    rmdivert /usr/sbin/xserver-configure
    rmdivert /usr/bin/ypwhich

    date
    echo -e "FAI finished.\a"

    call_hook chboot
    change_boot

    rm -f $stamp
    # save again, because new messages could be created
    save_dmesg
    ) > >( tee -a $rcslog )  2>&1

    call_hook savelog
    save_log_local
    save_log_remote

    if [ -f $stamp ]; then
	echo "Error while executing commands in subshell."
	echo "$stamp was not removed."
	die "Please look at the log files in /tmp for errors."
    fi

    wait_for_jobs
    call_hook faiend
    fai_boot
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main routine

# callarg=$1
fai_init
fai_setup  > >( tee -a $rcslog ) 2>&1

# if you want to recall rcS_fai
# [ -n $callarg ] && FAI_ACTION=$callarg

call_hook action
echo "FAI_ACTION: $FAI_ACTION"
case $FAI_ACTION in

    install)
	echo Performing FAI installation. All data may be overwritten !
	fai_install
	;;
    sysinfo)
	echo Showing system information.
	call_hook sysinfo
	fai_sysinfo
	echo The defined classes are:
	echo $classes
	echo The classes are also saved in /tmp/FAI_CLASSES
	die Now you have a shell.
	;;
    backup)
	echo Doing backup of multiple partitions.
	call_hook backup
	make_backup
	;;
    *)
	echo ERROR: FAI action $FAI_ACTION not defined.
	fai_boot
	;;
esac
