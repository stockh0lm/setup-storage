#!/bin/bash
# $Id$
#*********************************************************************
#
# rcS_fai -- main installation script executed after booting
#
# This script is part of FAI (Fully Automatic Installation)
# (c) 1999-2001 by Thomas Lange, lange@informatik.uni-koeln.de
# Universitaet zu Koeln
#
#*********************************************************************
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
# 
# A copy of the GNU General Public License is available as
# `/usr/share/common-licences/GPL' in the Debian GNU/Linux distribution
# or on the World Wide Web at http://www.gnu.org/copyleft/gpl.html. You
# can also obtain it by writing to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#*********************************************************************

#set -xv # for full debugging

# some variables
timeout=30 # bootpc timeout
FAI_VERSION=FAIVERSIONSTRING
classes="DEFAULT $HOSTNAME LAST"  # default before defining classes
rcslog=/tmp/rcS.log
stamp=/tmp/FAI_INSTALLATION_IN_PROGRESS
romountopt="-o ro,rsize=8192"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fai_init() {

    # source subroutines must be done before set -a, because of > >( tee )
    set -a # now export all variables
    . /usr/share/fai/subroutines
    . /etc/fai.conf
    DEBIAN_FRONTEND=Noninteractive
    # location of master files for cfengine
    FAI_FILES=/fai/files
    # local disks are mounted on this directory
    FAI_ROOT=/tmp/target
    ROOTCMD="chroot $FAI_ROOT"
    diskvar=/tmp/disk_var.sh
    moduleslog=/tmp/modules.log

    # for cfengine
    chroot=/usr/sbin/chroot
    cf_prefix="cfengine:"
    files=$FAI_FILES
    target=$FAI_ROOT

    umask 022
    PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/sbin:/usr/local/bin:
    ifup lo
    [ -x /sbin/portmap ] && /sbin/portmap
    mount -n -t proc proc /proc
    mount -n -t devpts devpts /dev/pts
    mount -n -o remount,rw,rsize=8192 /dev/root /
    cat /proc/kmsg >/dev/tty4 &
    create_ramdisk
    trap 'echo "Now rebooting";faireboot' INT QUIT
    save_dmesg
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fai_setup() {

    cat <<-EOF

    -----------------------------------------------------
      $FAI_VERSION
      Fully Automatic Installation for Debian GNU/Linux

      Copyright (c) 1999-2001, Thomas Lange
              lange@informatik.uni-koeln.de
    -----------------------------------------------------

EOF

    call_hook first
    # TODO: only start on demand; use FAI_FLAGS for that
    syslogd -m 0 -p /tmp/etc/syslogsocket
    klogd -c1 -f /tmp/kernel.log

    dmesg | grep -q "Sending DHCP requests" && get_dhcp_info
    dmesg | grep -q "Sending BOOTP requests" && get_bootp_info

    # create a resolv.conf
    if [ "$DNSSRVS" ]; then
	[ "$DOMAIN" ] && echo "domain $DOMAIN" >/tmp/etc/resolv.conf
	for dnshost in $DNSSRVS ; do
	    echo "nameserver $dnshost" >>/tmp/etc/resolv.conf
	done
    fi

    [ "$TIMESRVS_1" ] && rdate $TIMESRVS_1
    [ "$NTPSRVS_1" ]  && ntpdate -b -v $NTPSRVS

    echo -n "Kernel parameters:"; cat /proc/cmdline
    eval_cmdline

    [ "$FAI_LOCATION" ] || die "\$FAI_LOCATION not defined."
    mount $romountopt $FAI_LOCATION /fai &&
	    echo "/fai mounted from $FAI_LOCATION"

    call_hook setup
    DNSDOMAIN=$DOMAIN     # cfengine 1.5.3 can't use $DOMAIN

    for flag in $FAI_FLAGS; do
	eval "$flag=1"
	[ "$verbose" ] && echo "FAI_FLAGS: $flag=1"
    done
    unset flag

    devnull=/dev/null
    [ "$debug" ] && devnull=/dev/console

#    not yet used
#    if [ "$FAI_EXTRA_MOUNT" ]; then
#	mount $romountopt -n $FAI_EXTRA_MOUNT && echo "$FAI_EXTRA_MOUNT mounted"
#    fi

    [ "$createvt" ] && {
	# create two virtual terminals
	echo "Press ctrl-c to interrupt FAI and to get a shell"
	openvt -c2; openvt -c3
	trap 'echo "You can reboot with faireboot";bash' INT QUIT
    }

    [ "$sshd" -a -x /usr/sbin/sshd ] && /usr/sbin/sshd
    disk_info
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fai_install() {

    > $stamp

    {
    task defclass
    task defvar
    } > >( tee -a $rcslog )  2>&1
    save_dmesg
    ( # execute in a subshell to get all output

    load_keymap_consolechars

    task partition

    if [ ! -s $diskvar ]; then
	cat /tmp/format.log
	die "Error: $diskvar not found."
    fi
    . $diskvar
    [ ! -f /tmp/fstab ] && die "No /tmp/fstab created."
    task mountdisks

    task extrbase

    # now we can copy fstab
    [ -f $FAI_ROOT/etc/fstab ] && mv $FAI_ROOT/etc/fstab $FAI_ROOT/etc/fstab.old
    cp -p /tmp/fstab $FAI_ROOT/etc/fstab
    task mirror

    echo "Installing software may take a while"
    task updatebase

    task instsoft

    task configure

    umount -n $FAI_ROOT/proc
    # undo fake of programs
    rmdivert /sbin/start-stop-daemon
    rmdivert /usr/sbin/xserver-configure
    rmdivert /usr/bin/ypwhich

    date
    echo -e "FAI finished.\a"

    task chboot

    rm -f $stamp
    # save again, because new messages could be created
    save_dmesg
    ) > >( tee -a $rcslog )  2>&1

    task savelog

    if [ -f $stamp ]; then
	echo "Error while executing commands in subshell."
	echo "$stamp was not removed."
	die "Please look at the log files in /tmp for errors."
    fi

    wait_for_jobs
    task faiend
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main routine

# callarg=$1
fai_init
fai_setup  > >( tee -a $rcslog ) 2>&1

# if you want to recall rcS_fai
# [ -n $callarg ] && FAI_ACTION=$callarg

task action
